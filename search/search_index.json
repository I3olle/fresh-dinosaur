{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Einf%C3%BChrung/","title":"\u00dcber Diese Seite","text":""},{"location":"Einf%C3%BChrung/#uber_diese_seite","title":"\u00dcber Diese Seite","text":"<p>Hier sind verschiedenste Begriffe gesammelt \u00fcber die wir stolpern jedes mal wenn du mir \u00fcber die Schulter guckst.</p> <p>Ich habe die einzelnen Begriffe, Themen und Konzepte in groben Stichpunkten notiert und dann stumpf ChatGPT gebeten mir was zu diesen Stichpunkten zu erz\u00e4hlen. Bei manchen Begriffen habe ich zus\u00e4tzlich noch um einen ELI5 (Explain Like I'm Five) gebeten.</p>"},{"location":"Begriffe/Analyse/","title":"Analyse","text":""},{"location":"Begriffe/Analyse/#bereiche","title":"Bereiche","text":"<p>Observability, Monitoring und Telemetrie. In der Praxis sind diese drei Konzepte eng miteinander verkn\u00fcpft und oft komplement\u00e4r. Ein gutes System zur Beobachtung und \u00dcberwachung nutzt Telemetriedaten, um den Zustand und das Verhalten des Systems zu verstehen und auf Probleme zu reagieren. Gleichzeitig kann die Beobachtbarkeit dazu beitragen, tiefergehende Einblicke in das System zu gewinnen und die Ursachen von Problemen zu identifizieren, die durch einfache \u00dcberwachung m\u00f6glicherweise nicht erkennbar w\u00e4ren.</p>"},{"location":"Begriffe/Analyse/#observability","title":"Observability","text":"<p>Observability (Beobachtbarkeit) bezieht sich auf die F\u00e4higkeit, den internen Zustand eines Systems nur durch Betrachtung seiner Ausgaben zu verstehen. Es geht darum, genug Informationen und Kontext bereitzustellen, um eine Antwort auf die Frage \"Warum ist ein bestimmtes Ereignis passiert?\" zu geben. Dies beinhaltet die Verwendung von Metriken, Logs und Traces, um ein vollst\u00e4ndiges Bild des Systemzustands und -verhaltens zu erstellen. Im Idealfall sollte ein beobachtbares System in der Lage sein, Fragen zu beantworten, die vor dem Auftreten eines Ereignisses noch nicht gestellt wurden.</p>"},{"location":"Begriffe/Analyse/#monitoring","title":"Monitoring","text":"<p>Monitoring ist der Prozess der systematischen \u00dcberwachung eines Systems, um seinen Zustand und seine Leistung im Laufe der Zeit zu verfolgen. Dies beinhaltet in der Regel das Sammeln und Analysieren von Metriken und das Erzeugen von Alarmen, wenn bestimmte Bedingungen erf\u00fcllt sind. Monitoring ist oft reaktiv und konzentriert sich darauf, bekannte Probleme zu identifizieren und zu beheben.</p>"},{"location":"Begriffe/Analyse/#telemetrie","title":"Telemetrie","text":"<p>Telemetrie ist der Prozess der automatischen Messung und \u00dcbertragung von Daten von entfernten oder unzug\u00e4nglichen Systemen. In der Softwareentwicklung und IT kann Telemetrie beispielsweise das Sammeln von Metriken, Logs und anderen Daten von Anwendungen und Servern beinhalten, um die Leistung und das Verhalten dieser Systeme zu \u00fcberwachen.</p>"},{"location":"Begriffe/Analyse/#bestandteile","title":"Bestandteile","text":""},{"location":"Begriffe/Analyse/#logs","title":"Logs","text":"<p>In der Informatik sind Logs (oder Log-Dateien) Aufzeichnungen von Ereignissen, die in einem Betriebssystem oder einer anderen Software aufgetreten sind. Sie k\u00f6nnen eine Vielzahl von Informationen enthalten, wie zum Beispiel welche Aktionen von einem System oder einer Software ausgef\u00fchrt wurden, wann diese Aktionen stattgefunden haben und ob irgendwelche Fehler aufgetreten sind. Logs sind ein wichtiger Teil des System Monitorings und der Fehlerbehebung.</p>"},{"location":"Begriffe/Analyse/#metriken","title":"Metriken","text":"<p>In der Informatik und im Bereich Softwareentwicklung bezieht sich der Begriff Metriken auf quantifizierbare Ma\u00dfzahlen, die dazu verwendet werden, den Fortschritt, die Qualit\u00e4t oder die Effektivit\u00e4t eines Prozesses, eines Systems oder einer Software zu beurteilen. Metriken k\u00f6nnen eine Vielzahl von Aspekten abdecken, wie zum Beispiel die Leistung eines Systems, die Anzahl der Fehler, die in einer Software auftreten, oder die Dauer, die ben\u00f6tigt wird, um eine bestimmte Aufgabe abzuschlie\u00dfen.</p>"},{"location":"Begriffe/Analyse/#tools","title":"Tools","text":""},{"location":"Begriffe/Analyse/#datadog","title":"Datadog","text":"<p>Datadog ist ein Service, der Monitoring und Analysetools f\u00fcr IT-Infrastrukturen, Anwendungen und Logs bietet. Mit Datadog k\u00f6nnen Entwickler und Systemadministratoren Leistungsmetriken und Logs von Servern, Datenbanken und anderen Systemen erfassen und analysieren. Es hilft dabei, Probleme zu identifizieren und die Leistung und Stabilit\u00e4t von Systemen und Anwendungen zu verbessern. Es unterst\u00fctzt eine breite Palette von Systemen und Diensten und bietet umfangreiche Visualisierungswerkzeuge, um Daten zu interpretieren und zu verstehen.</p>"},{"location":"Begriffe/Arbeitsmethoden/","title":"Arbeitsmethoden","text":""},{"location":"Begriffe/Arbeitsmethoden/#methoden","title":"Methoden","text":"<p>Obwohl sie Unterschiede haben, zielen alle diese Ans\u00e4tze darauf ab, die Zusammenarbeit zu verbessern, die Flexibilit\u00e4t zu erh\u00f6hen und ein besseres Produkt zu liefern.</p>"},{"location":"Begriffe/Arbeitsmethoden/#agile","title":"Agile","text":"<p>Agile ist ein Ansatz f\u00fcr Projektmanagement und Softwareentwicklung, der sich auf Flexibilit\u00e4t, Kundenzusammenarbeit und das Reagieren auf \u00c4nderungen konzentriert, anstatt einem festgelegten Plan zu folgen. Agile Methoden zerlegen Projekte in kleinere, handhabbare Teile, die in kurzen Arbeitszyklen (sogenannten \"Sprints\") abgearbeitet werden. Dies erm\u00f6glicht es Teams, sich schnell an \u00c4nderungen anzupassen und kontinuierlich zu verbessern.</p>"},{"location":"Begriffe/Arbeitsmethoden/#scrum","title":"Scrum","text":"<p>Scrum ist ein spezielles agiles Framework f\u00fcr das Projektmanagement. Es unterteilt Projekte in kurze Arbeitszyklen, genannt Sprints, die normalerweise zwei Wochen bis einen Monat dauern. Jeder Sprint beginnt mit einer Planungssitzung, in der das Team entscheidet, welche Aufgaben es in diesem Sprint erledigen will. Am Ende eines jeden Sprints gibt es eine \u00dcberpr\u00fcfung, in der das Team die erledigte Arbeit pr\u00e4sentiert und Feedback sammelt. Scrum definiert auch verschiedene Rollen wie den Scrum Master (der den Prozess erleichtert) und den Product Owner (der die Priorit\u00e4ten des Projekts verwaltet).</p>"},{"location":"Begriffe/Arbeitsmethoden/#kanban","title":"Kanban","text":"<p>Kanban ist eine weitere Methode f\u00fcr das Projektmanagement und die Softwareentwicklung, die aus der Fertigungsindustrie stammt. Sie verwendet ein Board mit Karten (die Aufgaben repr\u00e4sentieren) und Spalten (die verschiedene Stufen des Prozesses repr\u00e4sentieren) um den Workflow zu visualisieren und zu verwalten. Im Gegensatz zu Scrum, das auf Sprints basiert, erm\u00f6glicht Kanban einen kontinuierlichen Fluss von Arbeit und konzentriert sich darauf, die Anzahl der gleichzeitig in Arbeit befindlichen Aufgaben (Work in Progress, WIP) zu begrenzen, um \u00dcberlastung zu vermeiden.</p>"},{"location":"Begriffe/Arbeitsmethoden/#fifo","title":"FIFO","text":"<p>FIFO steht f\u00fcr \"First In, First Out\". Es ist ein Prinzip, das in verschiedenen Bereichen, einschlie\u00dflich Computing und Buchhaltung, angewendet wird. In Bezug auf die Warteschlange bedeutet es, dass das erste Element, das hinzugef\u00fcgt wird, auch das erste ist, das entfernt wird.</p>"},{"location":"Begriffe/Arbeitsmethoden/#ticket_driven","title":"Ticket Driven","text":"<p>Im Kontext des Projektmanagements bedeutet Ticket Driven, dass die Arbeit anhand von Tickets organisiert und nachverfolgt wird. Diese Tickets repr\u00e4sentieren Aufgaben oder Probleme und k\u00f6nnen Details wie die zu erledigende Arbeit, den verantwortlichen Mitarbeiter und den Status der Aufgabe enthalten.</p>"},{"location":"Begriffe/Arbeitsmethoden/#tools","title":"Tools","text":""},{"location":"Begriffe/Arbeitsmethoden/#jira","title":"Jira","text":"<p>Jira ist ein beliebtes Projektmanagement-Tool, das von Atlassian entwickelt wurde. Es wird oft von Softwareentwicklungsteams verwendet, um Aufgaben zu verfolgen, den Fortschritt von Projekten zu \u00fcberwachen und den Workflow zu verwalten. Jira unterst\u00fctzt verschiedene Projektmanagement-Methoden wie Agile, Scrum und Kanban.</p>"},{"location":"Begriffe/Arbeitsmethoden/#elemente","title":"Elemente","text":""},{"location":"Begriffe/Arbeitsmethoden/#tickets","title":"Tickets","text":"<p>Im Kontext der Softwareentwicklung und des Projektmanagements sind Tickets Aufgaben oder Probleme, die gel\u00f6st werden m\u00fcssen. Sie k\u00f6nnen verschiedene Formen annehmen, wie beispielsweise Fehlerberichte, Feature-Anfragen oder allgemeine Aufgaben. Jedes Ticket hat in der Regel einen Status, der seinen Fortschritt im Workflow anzeigt.</p>"},{"location":"Begriffe/Arbeitsmethoden/#epic","title":"Epic","text":"<p>Ein Epic ist eine gro\u00dfe, umfassende User Story, die in kleinere Stories aufgeteilt werden kann. Epics repr\u00e4sentieren oft gro\u00dfe Funktionsbereiche oder Meilensteine innerhalb eines Projekts. Sie helfen dabei, komplexe Features in \u00fcberschaubare Teile zu zerlegen und erm\u00f6glichen so eine schrittweise Umsetzung.</p>"},{"location":"Begriffe/Arbeitsmethoden/#story","title":"Story","text":"<p>Eine Story, auch User Story genannt, ist eine kurze Beschreibung eines Features oder einer Funktionalit\u00e4t aus der Sicht des Benutzers. Sie beschreibt, was der Benutzer tun k\u00f6nnen soll und welchen Nutzen er daraus zieht. Stories werden oft auf Karten oder Tickets geschrieben und dienen als Anforderungen f\u00fcr das Entwicklungsteam.</p>"},{"location":"Begriffe/Arbeitsmethoden/#spike","title":"Spike","text":"<p>Ein Spike ist eine Aufgabe oder ein Ticket, das verwendet wird, um eine spezifische technische oder konzeptionelle Herausforderung zu untersuchen oder zu l\u00f6sen. Es handelt sich normalerweise um eine zeitlich begrenzte Aktivit\u00e4t, die darauf abzielt, Wissen oder Erkenntnisse zu gewinnen, um eine bestimmte Aufgabe oder Story besser sch\u00e4tzen oder bew\u00e4ltigen zu k\u00f6nnen.</p>"},{"location":"Begriffe/Arbeitsmethoden/#bug","title":"Bug","text":"<p>Ein Bug ist ein Fehler oder eine Abweichung von der erwarteten Funktionalit\u00e4t in einer Software. Bugs k\u00f6nnen w\u00e4hrend des Entwicklungsprozesses oder nach der Auslieferung der Software auftreten. Das Finden und Beheben von Fehlern ist ein wichtiger Bestandteil des agilen Entwicklungsprozesses, um eine hohe Qualit\u00e4t der Software sicherzustellen.</p>"},{"location":"Begriffe/Arbeitsmethoden/#task","title":"Task","text":"<p>Ein Task ist eine konkrete Aufgabe oder Arbeitseinheit, die zur Umsetzung einer Story oder eines Epics erforderlich ist. Tasks sind spezifisch, messbar und k\u00f6nnen einem Teammitglied zugewiesen werden. Sie dienen dazu, den Fortschritt und die Arbeitsteilung innerhalb des Teams zu verfolgen und zu organisieren.</p>"},{"location":"Begriffe/Arbeitsmethoden/#story_points","title":"Story Points","text":"<p>Story Points sind eine relative Einheit zur Sch\u00e4tzung des Aufwands oder der Komplexit\u00e4t einer Story. Sie dienen dazu, den Umfang und die Schwierigkeit einer Aufgabe im Vergleich zu anderen Stories im Backlog zu bewerten. Das Team vergibt Story Points w\u00e4hrend der Sch\u00e4tzungs- und Planungsphase, um den Aufwand und die Kapazit\u00e4t f\u00fcr jeden Sprint zu planen. Story Points sind keine absoluten Zeiteinheiten, sondern spiegeln das Verst\u00e4ndnis des Teams f\u00fcr die Arbeit wider.</p>"},{"location":"Begriffe/Arbeitsmethoden/#sprint","title":"Sprint","text":"<p>Im agilen Projektmanagement, insbesondere in Scrum, ist ein Sprint ein kurzer, fester Zeitraum, in dem ein bestimmtes Set von Aufgaben abgeschlossen werden soll. Sprints dauern normalerweise zwei Wochen bis einen Monat.</p>"},{"location":"Begriffe/Arbeitsmethoden/#swimlanes","title":"Swimlanes","text":"<p>Swimlanes sind visuelle Elemente in einem Workflow- oder Prozessdiagramm, die dazu dienen, verschiedene Aufgaben, Arbeitsabl\u00e4ufe oder Verantwortlichkeiten zu trennen. Sie sehen aus wie parallele Linien, die den Fluss von Arbeit repr\u00e4sentieren, wobei jede Lane eine separate Kategorie repr\u00e4sentiert. In einem Kanban-Board, zum Beispiel, k\u00f6nnten Swimlanes verschiedene Phasen des Workflows repr\u00e4sentieren (z.B. \"Zu tun\", \"In Arbeit\", \"Fertig\").</p>"},{"location":"Begriffe/Architektur/","title":"Architektur","text":""},{"location":"Begriffe/Architektur/#konzepte","title":"Konzepte","text":""},{"location":"Begriffe/Architektur/#serverless","title":"Serverless","text":"<p>Serverless ist ein Konzept in der Cloud-Computing-Architektur, bei dem der Entwickler nicht die physischen Server verwalten muss, sondern sich auf die Ausf\u00fchrung des Codes konzentrieren kann. Obwohl der Name \"serverless\" (serverfrei) impliziert, dass keine Server involviert sind, gibt es tats\u00e4chlich immer noch Server, die den Code ausf\u00fchren. Der Unterschied besteht jedoch darin, dass das Management der Server von den Cloud-Anbietern und nicht von den Entwicklern oder ihren Organisationen durchgef\u00fchrt wird. AWS Lambda ist ein Beispiel f\u00fcr eine serverless Plattform.</p> <p>Die Idee hinter der serverless Architektur besteht darin, Entwickler von der Notwendigkeit zu befreien, sich um das Hosting und die Skalierung ihrer Anwendungen k\u00fcmmern zu m\u00fcssen. Stattdessen k\u00f6nnen sie sich auf das Schreiben des Codes konzentrieren, w\u00e4hrend der Cloud-Anbieter (wie AWS, Google Cloud oder Azure) sich um das Hosting und die Skalierung k\u00fcmmert. Das bedeutet auch, dass die Kosten im Allgemeinen variabel sind und auf dem tats\u00e4chlichen Verbrauch basieren, anstatt dass feste Kosten f\u00fcr die Serverkapazit\u00e4t anfallen.</p>"},{"location":"Begriffe/Architektur/#eli5","title":"ELI5","text":"<p>Okay, lass uns versuchen, Serverless so einfach wie m\u00f6glich zu erkl\u00e4ren.</p> <p>Stell dir vor, du m\u00f6chtest eine Geburtstagsparty veranstalten, aber du hast keine Lust, alles selbst zu organisieren - du willst nicht den Raum mieten, die Dekorationen aufh\u00e4ngen, das Essen zubereiten, und so weiter. Stattdessen gehst du zu einem Veranstaltungsort, der alles f\u00fcr dich erledigt. Sie haben den Raum, sie bereiten das Essen zu, sie k\u00fcmmern sich um die Dekoration - alles, was du tun musst, ist aufzutauchen und die Party zu genie\u00dfen. Und das Beste daran? Du bezahlst nur f\u00fcr das, was du tats\u00e4chlich nutzt.</p> <p>Serverless ist \u00e4hnlich, aber f\u00fcr Computerprogramme. Statt einen eigenen Computer (Server) zu haben, der immer bereit ist und l\u00e4uft, um dein Programm auszuf\u00fchren, l\u00e4dst du einfach dein Programm in die \"Cloud\" hoch (das ist ein anderer Name f\u00fcr Computer, die von gro\u00dfen Unternehmen wie Amazon, Google oder Microsoft betrieben werden). Diese Unternehmen k\u00fcmmern sich um alles - sie sorgen daf\u00fcr, dass dein Programm immer dann l\u00e4uft, wenn es ben\u00f6tigt wird, sie sorgen daf\u00fcr, dass es mehr Ressourcen hat, wenn es sehr besch\u00e4ftigt ist, und sie sorgen daf\u00fcr, dass es sicher ist. Und genau wie bei der Geburtstagsparty bezahlst du nur f\u00fcr das, was du tats\u00e4chlich nutzt.</p> <p>Das ist der Grundgedanke hinter Serverless - es erm\u00f6glicht Entwicklern, sich auf ihr Programm zu konzentrieren, ohne sich um all die Details k\u00fcmmern zu m\u00fcssen, die mit dem Betrieb eines Servers verbunden sind.</p>"},{"location":"Begriffe/Architektur/#microservices","title":"Microservices","text":"<p>Microservices, auch bekannt als Mikroservice-Architektur, sind ein architektonischer Ansatz f\u00fcr die Softwareentwicklung, bei dem eine Anwendung aus kleinen, unabh\u00e4ngigen Services besteht, die jeweils einen spezifischen Gesch\u00e4ftsprozess oder eine Gesch\u00e4ftsfunktion ausf\u00fchren.</p> <p>Jeder Microservice in einer Anwendung ist ein eigenst\u00e4ndiger Prozess, der eine spezifische Gesch\u00e4ftsfunktion erf\u00fcllt und \u00fcber eine gut definierte API kommuniziert. Microservices k\u00f6nnen unabh\u00e4ngig voneinander entwickelt, bereitgestellt und skaliert werden, und sie k\u00f6nnen in unterschiedlichen Programmiersprachen geschrieben und auf unterschiedlichen Plattformen ausgef\u00fchrt werden.</p> <p>Hier sind einige Vorteile der Verwendung von Microservices:</p> <ul> <li>Entkopplung:<ul> <li>Da jeder Microservice f\u00fcr eine bestimmte Funktion zust\u00e4ndig ist, k\u00f6nnen \u00c4nderungen an einem Service vorgenommen werden, ohne andere Services zu beeinflussen. Dies kann die Entwicklungsgeschwindigkeit und -flexibilit\u00e4t erh\u00f6hen.</li> </ul> </li> <li>Skalierbarkeit:<ul> <li>Microservices k\u00f6nnen unabh\u00e4ngig voneinander skaliert werden, je nachdem, welcher Service gerade die h\u00f6chste Last hat. Dies kann dazu beitragen, Ressourcen effizienter zu nutzen und die Leistung der Anwendung zu verbessern.</li> </ul> </li> <li>Fehlertoleranz:<ul> <li>Wenn ein Microservice ausf\u00e4llt, beeintr\u00e4chtigt das normalerweise nicht den Rest der Anwendung. Dies kann dazu beitragen, die Gesamtverf\u00fcgbarkeit und Zuverl\u00e4ssigkeit der Anwendung zu verbessern.</li> </ul> </li> <li>Technologische Vielfalt:<ul> <li>Da Microservices unabh\u00e4ngig voneinander entwickelt werden k\u00f6nnen, haben Teams die Freiheit, die Technologien zu w\u00e4hlen, die am besten zu den Anforderungen jedes einzelnen Services passen.</li> </ul> </li> </ul> <p>Trotz dieser Vorteile bringt die Microservice-Architektur auch Herausforderungen mit sich, insbesondere in Bezug auf die Verwaltung und Orchestrierung einer gr\u00f6\u00dferen Anzahl von Services, das Monitoring und Debugging von Problemen in einem verteilten System, und die Aufrechterhaltung der Datenintegrit\u00e4t \u00fcber mehrere Datenbanken hinweg. Es ist wichtig, diese Herausforderungen zu ber\u00fccksichtigen und geeignete Tools und Praktiken einzusetzen, wenn man sich f\u00fcr eine Microservice-Architektur entscheidet.</p>"},{"location":"Begriffe/Architektur/#eli5_1","title":"ELI5","text":"<p>Stell dir vor, du hast einen riesigen Lego-Bausatz. Du k\u00f6nntest alle Teile in einen gro\u00dfen Haufen werfen und versuchen, das Modell so zu bauen. Aber es w\u00e4re viel einfacher, wenn du die Teile in kleine Haufen aufteilst, die jeweils zu einem bestimmten Abschnitt des Modells geh\u00f6ren. So k\u00f6nntest du jeden Abschnitt einzeln bauen, und wenn du einen Fehler machst oder etwas \u00e4ndern m\u00f6chtest, musst du nur den betreffenden Abschnitt \u00e4ndern und nicht das gesamte Modell.</p> <p>Microservices in der Softwareentwicklung funktionieren \u00e4hnlich. Anstatt eine gro\u00dfe, komplexe Anwendung zu haben, teilen wir sie auf in viele kleinere Dienste (\u00e4hnlich wie die kleinen Haufen von Lego-Teilen), wobei jeder Dienst f\u00fcr eine bestimmte Aufgabe zust\u00e4ndig ist. Diese Dienste arbeiten zusammen, um die gesamte Anwendung zu bilden, aber weil sie unabh\u00e4ngig voneinander sind, k\u00f6nnen wir sie einzeln \u00e4ndern oder verbessern, ohne die gesamte Anwendung beeinflussen zu m\u00fcssen.</p> <p>Diese Art der Organisation macht es einfacher, gro\u00dfe und komplexe Anwendungen zu erstellen und zu verwalten, da wir uns auf einzelne Teile konzentrieren k\u00f6nnen, statt immer die gesamte Anwendung im Blick haben zu m\u00fcssen. Es ist auch einfacher, Probleme zu beheben, da wir uns auf den spezifischen Dienst konzentrieren k\u00f6nnen, der das Problem verursacht, anstatt durch den gesamten Code der Anwendung suchen zu m\u00fcssen.</p>"},{"location":"Begriffe/Architektur/#tools","title":"Tools","text":""},{"location":"Begriffe/Architektur/#lambda","title":"Lambda","text":"<p>AWS Lambda ist ein Dienst von Amazon Web Services (AWS), der es Ihnen erm\u00f6glicht, Code auszuf\u00fchren, ohne dass Sie Server bereitstellen oder verwalten m\u00fcssen. Mit AWS Lambda laden Sie einfach Ihren Code hoch (der eine Funktion oder \"Lambda-Funktion\" genannt wird), und der Dienst f\u00fchrt ihn aus, wann immer der definierte Trigger (wie eine \u00c4nderung in einer Datenbank, eine Anfrage an eine API oder ein bestimmtes Ereignis) aktiviert wird. Sie zahlen nur f\u00fcr die Rechenzeit, die Sie tats\u00e4chlich verbrauchen, was Lambda und \u00e4hnliche Dienste zu einer kosteneffizienten Wahl f\u00fcr viele Anwendungen macht.</p>"},{"location":"Begriffe/Cloud/","title":"Cloud","text":""},{"location":"Begriffe/Cloud/#cloud","title":"Cloud","text":"<p>Die Cloud ist ein Begriff, der sich auf eine virtuelle Umgebung bezieht, in der Ressourcen und Dienste \u00fcber das Internet bereitgestellt werden. Statt lokale Server und Infrastruktur zu verwenden, k\u00f6nnen Unternehmen und Benutzer die Cloud nutzen, um auf leistungsstarke Rechenkapazit\u00e4ten, Speicherplatz, Datenbanken, Netzwerke und viele andere Dienste zuzugreifen. Die Cloud bietet Skalierbarkeit, Flexibilit\u00e4t und die M\u00f6glichkeit, Ressourcen nach Bedarf zu nutzen, ohne in teure Hardware investieren zu m\u00fcssen.</p> <p>\u2139 Info: Da ich fast ausschlie\u00dflich mit der AWS Cloud arbeite, werden sich auch die meisten Cloud Themen auf die AWS Cloud beziehen</p>"},{"location":"Begriffe/Cloud/#aws_accounts","title":"AWS Accounts","text":"<p>AWS Accounts sind Konten, die von Amazon Web Services (AWS) bereitgestellt werden. Mit einem AWS Account k\u00f6nnen Benutzer auf die verschiedenen Dienste und Ressourcen von AWS zugreifen. Jeder AWS Account hat eine eindeutige Kennung und kann verwendet werden, um Ressourcen in der AWS-Cloud zu erstellen, zu verwalten und darauf zuzugreifen.</p>"},{"location":"Begriffe/Cloud/#vpc","title":"VPC","text":"<p>VPC steht f\u00fcr Virtual Private Cloud und ist ein Dienst von AWS, der es Benutzern erm\u00f6glicht, eine isolierte, virtuelle Netzwerkumgebung in der AWS-Cloud zu erstellen. Eine VPC fungiert als abgeschottetes Netzwerk, in dem Benutzer ihre Ressourcen betreiben k\u00f6nnen. Es erlaubt die Kontrolle \u00fcber das Netzwerkdesign, die IP-Adressierung, die Subnetze und die Netzwerksicherheit. Mit einer VPC k\u00f6nnen Benutzer ihre Infrastruktur in der Cloud ma\u00dfgeschneidert konfigurieren und verwalten, w\u00e4hrend sie gleichzeitig eine isolierte Umgebung erhalten, um ihre Anwendungen und Daten zu sch\u00fctzen.</p>"},{"location":"Begriffe/Cloud/#security_groups","title":"Security Groups","text":"<p>Security Groups sind ein Sicherheitsmechanismus in der AWS-Cloud, der den Zugriff auf Ressourcen innerhalb einer Virtual Private Cloud (VPC) kontrolliert. Sie fungieren als virtuelle Firewalls und erm\u00f6glichen es Benutzern, den eingehenden und ausgehenden Netzwerkverkehr f\u00fcr ihre Ressourcen zu steuern.</p> <p>Eine Security Group ist mit einer oder mehreren Instanzen (z. B. EC2-Instanzen) oder anderen AWS-Ressourcen verkn\u00fcpft. Sie besteht aus Regeln, die den Netzwerkverkehr basierend auf Quellund Ziel-IP-Adressen, Ports und Protokollen steuern. Diese Regeln definieren, welche Arten von Verbindungen erlaubt oder blockiert werden.</p> <p>Security Groups arbeiten auf dem Prinzip der \"Deny-by-default\"-Regel, was bedeutet, dass der gesamte eingehende Verkehr standardm\u00e4\u00dfig blockiert wird, es sei denn, es wurden explizite Regeln definiert, die den Verkehr zulassen. Dadurch wird ein h\u00f6heres Ma\u00df an Sicherheit gew\u00e4hrleistet, da nur der spezifizierte erlaubte Verkehr zugelassen wird.</p> <p>Benutzer k\u00f6nnen die Regeln einer Security Group flexibel konfigurieren und anpassen, um den spezifischen Sicherheitsanforderungen ihrer Anwendungen gerecht zu werden. Zum Beispiel k\u00f6nnen sie festlegen, dass nur bestimmte IP-Adressen oder IP-Bereiche auf bestimmte Ports zugreifen d\u00fcrfen.</p> <p>Security Groups sind ein wesentlicher Bestandteil der Sicherheitsarchitektur in der AWS-Cloud. Sie helfen dabei, den Zugriff auf Ressourcen zu kontrollieren, potenzielle Angriffe abzuwehren und die Integrit\u00e4t und Vertraulichkeit von Daten in der Cloud zu gew\u00e4hrleisten. Durch die korrekte Konfiguration und Verwaltung von Security Groups k\u00f6nnen Benutzer ihre Ressourcen effektiv vor unberechtigtem Zugriff sch\u00fctzen.</p>"},{"location":"Begriffe/Cloud/#eli5","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest eine Party in deinem Haus feiern. Damit die Party sicher und gesch\u00fctzt ist, m\u00f6chtest du kontrollieren, wer in dein Haus darf und wer nicht. Hier kommen Security Groups ins Spiel.</p> <p>Eine Security Group ist wie ein Sicherheitsdienst f\u00fcr dein Haus. Sie hilft dir dabei, den Zugriff auf deine Ressourcen in der AWS-Cloud zu kontrollieren. Du kannst festlegen, wer von au\u00dfen auf deine Ressourcen zugreifen darf und wer nicht.</p> <p>\u00c4hnlich wie bei einer G\u00e4steliste kannst du mit einer Security Group bestimmte Regeln festlegen. Zum Beispiel kannst du sagen: \"Nur meine Freunde d\u00fcrfen zur Party kommen\" oder \"Niemand darf nach 22 Uhr in mein Haus\".</p> <p>In der AWS-Cloud funktioniert es \u00e4hnlich. Du kannst eine Security Group erstellen und Regeln definieren, wer auf deine Ressourcen zugreifen darf und wer nicht. Du kannst den Zugriff auf bestimmte IP-Adressen oder IP-Bereiche, bestimmte Ports oder bestimmte Protokolle beschr\u00e4nken.</p> <p>Wenn jemand versucht, auf deine Ressourcen zuzugreifen, \u00fcberpr\u00fcft die Security Group die Regeln. Wenn die Person erlaubt ist, wird der Zugriff gew\u00e4hrt. Wenn die Person nicht auf der Liste steht, wird der Zugriff verweigert.</p> <p>Security Groups helfen dabei, deine Ressourcen in der Cloud vor unbefugtem Zugriff zu sch\u00fctzen. Sie sorgen daf\u00fcr, dass nur diejenigen, die erlaubt sind, auf deine Daten und Dienste zugreifen k\u00f6nnen. \u00c4hnlich wie ein Sicherheitsdienst auf deiner Party sch\u00fctzt die Security Group deine Ressourcen und sorgt f\u00fcr ein sicheres Umfeld.</p>"},{"location":"Begriffe/Datenbanken/","title":"Datenbanken","text":""},{"location":"Begriffe/Datenbanken/#was_sind_datenbanken","title":"Was Sind Datenbanken?","text":"<p>Datenbanken sind wie gro\u00dfe und organisierte Datensammlungen, in denen Informationen gespeichert und abgerufen werden k\u00f6nnen. Stell sie dir wie eine strukturierte Speicherplatz vor, in dem Daten effizient gespeichert und verwaltet werden k\u00f6nnen.</p>"},{"location":"Begriffe/Datenbanken/#graph","title":"Graph","text":"<p>Ein Graph ist eine Art von Datenbankmodell, das auf dem Konzept von Knoten und Kanten basiert. Es ist eine M\u00f6glichkeit, Beziehungen zwischen verschiedenen Datenpunkten darzustellen. In einem Graphen werden die Datenpunkte als Knoten dargestellt, w\u00e4hrend die Beziehungen zwischen ihnen als Kanten dargestellt werden. Graphdatenbanken sind besonders n\u00fctzlich, um komplexe Beziehungen und Abh\u00e4ngigkeiten in den Daten zu modellieren und abzufragen.</p>"},{"location":"Begriffe/Datenbanken/#sql","title":"SQL","text":"<p>SQL steht f\u00fcr \"Structured Query Language\" und ist eine spezielle Sprache, die verwendet wird, um Datenbanken zu verwalten und auf sie zuzugreifen. Mit SQL k\u00f6nnen Datenbanken erstellt, ge\u00e4ndert, abgefragt und gel\u00f6scht werden. Es ist eine standardisierte Sprache, die in vielen Datenbanksystemen verwendet wird und es Entwicklern erm\u00f6glicht, auf Daten in einer einheitlichen und strukturierten Weise zuzugreifen.</p> <p>In SQL k\u00f6nnen Entwickler Abfragen schreiben, um bestimmte Daten aus einer Datenbank abzurufen. Zum Beispiel kann man nach allen Kunden suchen, die in einer bestimmten Stadt leben oder nach Produkten mit einem bestimmten Preis suchen. SQL erm\u00f6glicht auch das Hinzuf\u00fcgen, Aktualisieren oder L\u00f6schen von Daten in der Datenbank.</p> <p>\u2139 Info: Datenbanken ist ein riesen Thema f\u00fcr sich. Das sind nur die paar Themen die wir zu dem Thema angeschnitten hatten</p>"},{"location":"Begriffe/Entwicklungsprozesse/","title":"Entwicklungsprozesse","text":""},{"location":"Begriffe/Entwicklungsprozesse/#stages","title":"Stages","text":"<p>Im Kontext der Softwareentwicklung bezeichnet \"Stages\" oder \"Phasen\" die unterschiedlichen Schritte im Entwicklungsprozess eines Softwareprodukts. H\u00e4ufig genutzte Phasen sind beispielsweise Planung, Design, Implementierung, Testen, Deployment und Wartung. Jede Phase hat einen spezifischen Fokus und Zweck innerhalb des gesamten Lebenszyklus der Softwareentwicklung. Manchmal k\u00f6nnen diese Phasen linear ablaufen (wie im Wasserfallmodell), aber in agilen oder iterativen Entwicklungsans\u00e4tzen k\u00f6nnen sie sich auch \u00fcberlappen oder wiederholen.</p>"},{"location":"Begriffe/Entwicklungsprozesse/#sdlc","title":"SDLC","text":"<p>SDLC steht f\u00fcr \"Software Development Life Cycle\" und bezeichnet den Prozess, den ein Softwareprodukt von der urspr\u00fcnglichen Konzeption bis zur endg\u00fcltigen Auslieferung und Wartung durchl\u00e4uft. Es gibt verschiedene Modelle f\u00fcr den SDLC, darunter das Wasserfallmodell, das Spiralmodell und agile Modelle. Jedes Modell hat verschiedene Phasen oder \"Stages\", die in unterschiedlicher Reihenfolge und auf unterschiedliche Weise durchlaufen werden. Im Allgemeinen umfasst der SDLC Phasen wie Anforderungsanalyse, Design, Implementierung, Testen, Deployment und Wartung.</p> <p>Siehe Git </p>"},{"location":"Begriffe/Entwicklungsprozesse/#semantic_versioning","title":"Semantic Versioning","text":"<p>Semantic Versioning, oft auch als SemVer bezeichnet, ist ein Versionierungsschema, das versucht, Bedeutung zu den Versionen von Software zu bringen. Es hilft dabei, Ver\u00e4nderungen an der Software klar zu kommunizieren und den Erwartungen der Nutzer gerecht zu werden.</p> <p>Ein typisches SemVer-Format besteht aus drei Zahlen, die durch Punkte getrennt sind. Diese drei Zahlen repr\u00e4sentieren die Hauptversion (major), Nebenversion (minor) und den Patchstand (patch). Das Format sieht also wie folgt aus:</p> <pre><code>MAJOR.MINOR.PATCH\n</code></pre> <p>Hier ist, was jede dieser Komponenten bedeutet:</p> <ul> <li> <p>MAJOR: Diese Zahl erh\u00f6ht sich, wenn es inkompatible \u00c4nderungen in der API gibt, die dazu f\u00fchren, dass Nutzer ihre Art der Nutzung der Software \u00e4ndern m\u00fcssen, um mit dieser neuen Version zu arbeiten.</p> </li> <li> <p>MINOR: Diese Zahl erh\u00f6ht sich, wenn es neue Funktionen gibt, die abw\u00e4rtskompatibel sind. Das bedeutet, dass Nutzer neue Funktionen nutzen k\u00f6nnen, ohne dass sie ihre Art der Nutzung der Software \u00e4ndern m\u00fcssen.</p> </li> <li> <p>PATCH: Diese Zahl erh\u00f6ht sich, wenn abw\u00e4rtskompatible Bugfixes durchgef\u00fchrt wurden. Das sind in der Regel kleinere \u00c4nderungen, die vorhandene Probleme beheben, ohne die Art und Weise, wie die Software genutzt wird, zu \u00e4ndern.</p> </li> </ul> <p>Dar\u00fcber hinaus k\u00f6nnen Prerelease- und Build-Metadaten durch einen Bindestrich bzw. Pluszeichen an das Ende des Formats angeh\u00e4ngt werden. Sie sind optional und bieten weitere Details \u00fcber die Version.</p> <p>Ein Beispiel f\u00fcr ein vollst\u00e4ndiges SemVer-Format k\u00f6nnte 2.5.0-alpha+001 sein. Hierbei handelt es sich um die Hauptversion 2, Nebenversion 5, Patch 0, eine Alpha-Vorabversion und Build 001.</p>"},{"location":"Begriffe/Git/","title":"Git","text":""},{"location":"Begriffe/Git/#was_ist_git","title":"Was Ist Git?","text":"<p>Git ist ein Versionskontrollsystem, das entwickelt wurde, um die Verwaltung von \u00c4nderungen in Softwareprojekten zu erleichtern. Es erm\u00f6glicht Entwicklern, ihre Arbeit zu verfolgen, \u00c4nderungen zu verwalten und effektiv mit anderen zusammenzuarbeiten.</p>"},{"location":"Begriffe/Git/#eli5","title":"ELI5","text":"<p>Stell dir vor, du malst ein Bild auf einem Blatt Papier. Aber du m\u00f6chtest nicht nur das fertige Bild behalten, sondern auch den gesamten Entstehungsprozess aufzeichnen, um sp\u00e4ter \u00c4nderungen vornehmen oder auf \u00e4ltere Versionen zur\u00fcckgreifen zu k\u00f6nnen. Hier kommt Git ins Spiel.</p> <p>Git ist wie ein magisches Tagebuch f\u00fcr deine Arbeit an einem Projekt. Jedes Mal, wenn du \u00c4nderungen an deinem Projekt vornimmst, schreibst du sie in das Tagebuch auf. Git speichert jede Version deiner Dateien und speichert alle \u00c4nderungen, die du machst.</p> <p>Mit Git kannst du verschiedene Versionen deiner Dateien erstellen, so \u00e4hnlich wie wenn du ein Bild in verschiedenen Schritten malst. Du kannst den Fortschritt sehen und zu jedem beliebigen Zeitpunkt zu einer fr\u00fcheren Version zur\u00fcckkehren.</p> <p>Git hilft auch beim Zusammenarbeiten mit anderen. Stell dir vor, du m\u00f6chtest mit einem Freund zusammen an demselben Bild arbeiten. Git erlaubt euch beiden, an euren eigenen Kopien des Projekts zu arbeiten und die \u00c4nderungen sp\u00e4ter zu kombinieren. Es sorgt daf\u00fcr, dass ihr nicht versehentlich eure Arbeit \u00fcberschreibt.</p> <p>Git ist wie ein Zauberbuch, das deine Arbeit speichert, Ver\u00e4nderungen verfolgt und es dir erm\u00f6glicht, alle fr\u00fcheren Versionen deiner Dateien zu behalten. Es ist ein leistungsstarkes Werkzeug f\u00fcr Entwickler und K\u00fcnstler, um ihre Arbeit zu organisieren und effektiv zusammenzuarbeiten.</p>"},{"location":"Begriffe/Git/#versionierung","title":"Versionierung","text":"<p>Versionierung bezieht sich auf die Verwaltung und Nachverfolgung von \u00c4nderungen an Dateien oder Code. Mit Git kannst du den Verlauf deiner \u00c4nderungen speichern und auf fr\u00fchere Versionen zur\u00fcckgreifen, falls etwas schief geht oder du zu einer fr\u00fcheren Version zur\u00fcckkehren m\u00f6chtest.</p>"},{"location":"Begriffe/Git/#branches","title":"Branches","text":"<p>Branches sind separate Linien der Entwicklung in einem Git-Repository. Sie erlauben es Entwicklern, unabh\u00e4ngig voneinander an unterschiedlichen Funktionen oder Aufgaben zu arbeiten. Jeder Branch hat eine eigene Kopie des Codes, auf der \u00c4nderungen gemacht werden k\u00f6nnen, ohne die Hauptentwicklungslinie zu beeinflussen.</p>"},{"location":"Begriffe/Git/#beispiel","title":"Beispiel","text":""},{"location":"Begriffe/Git/#merge","title":"Merge","text":"<p>Merge ist der Prozess, bei dem \u00c4nderungen aus einem Branch in einen anderen Branch oder in den Hauptentwicklungszweig (oft als \"master\" oder \"main\" bezeichnet) \u00fcberf\u00fchrt werden. Es kombiniert die \u00c4nderungen und integriert sie nahtlos, so dass der Code auf dem aktuellen Stand ist.</p>"},{"location":"Begriffe/Git/#fetch","title":"Fetch","text":"<p>Fetch all bezieht sich auf den Vorgang, bei dem alle \u00c4nderungen und Updates aus einem entfernten Git-Repository abgerufen werden. Das umfasst sowohl neue Branches als auch \u00c4nderungen an vorhandenen Branches.</p>"},{"location":"Begriffe/Git/#rebase","title":"Rebase","text":"<p>Rebase ist ein Git-Befehl, der es erm\u00f6glicht, die \u00c4nderungen in einem Branch auf den neuesten Stand zu bringen, indem sie auf die neueste Version des Hauptentwicklungszweigs angewendet werden. Dadurch entsteht ein linearerer Verlauf der \u00c4nderungen im Code.</p>"},{"location":"Begriffe/Git/#repository","title":"Repository","text":"<p>Ein Repository ist ein Speicherort, in dem Git den Code und die Dateien eines Projekts speichert. Es enth\u00e4lt den gesamten Verlauf der \u00c4nderungen, die verschiedenen Branches und alle Informationen, die zum Verwalten des Codes ben\u00f6tigt werden.</p>"},{"location":"Begriffe/Git/#github","title":"GitHub","text":"<p>GitHub ist eine webbasierte Plattform, die auf Git basiert und es Entwicklern erm\u00f6glicht, ihre Git-Repositories online zu hosten und mit anderen zusammenzuarbeiten. Es bietet Funktionen wie Pull Requests, um \u00c4nderungen zu \u00fcberpr\u00fcfen und zu integrieren, Issue Tracking f\u00fcr das Verfolgen von Aufgaben und Fehlermeldungen, sowie Tools f\u00fcr die Zusammenarbeit in Teams. Es ist eine beliebte Plattform f\u00fcr die gemeinsame Entwicklung von Open-Source-Projekten und f\u00fcr die Zusammenarbeit in Softwareentwicklungsteams.</p>"},{"location":"Begriffe/Git/#pull_request","title":"Pull Request","text":"<p>Ein Pull Request ist ein Beitrag, den ein Entwickler zu einem Softwareprojekt leistet. Der Entwickler \u00e4ndert den Code auf seinem eigenen Fork oder einer Kopie des Projekts und stellt dann eine Anfrage, um diese \u00c4nderungen in das Hauptprojekt einzuf\u00fcgen. Andere Mitglieder des Teams k\u00f6nnen die \u00c4nderungen pr\u00fcfen, kommentieren und Vorschl\u00e4ge zur Verbesserung machen, bevor sie in das Hauptprojekt eingef\u00fcgt werden.</p>"},{"location":"Begriffe/Git/#codeowners","title":"Codeowners","text":"<p>Die CODEOWNERS Datei in einem GitHub-Projekt wird genutzt, um bestimmte Personen oder Teams automatisch als Reviewer f\u00fcr Pull Requests einzusetzen, die bestimmte Dateien oder Verzeichnisse betreffen.</p>"},{"location":"Begriffe/Git/#review-prozess","title":"Review-Prozess","text":"<p>Der Review-Prozess in Softwareentwicklung bezieht sich auf den Prozess, in dem andere Entwickler den Code pr\u00fcfen, der in einem Pull Request vorgeschlagen wurde. Sie \u00fcberpr\u00fcfen die Qualit\u00e4t des Codes, ob er die Problemstellung korrekt l\u00f6st, ob er keine neuen Fehler oder Sicherheitsprobleme einf\u00fchrt, usw. Dieser Prozess ist eine wichtige Methode, um Codequalit\u00e4t und Konsistenz in einem Softwareprojekt zu gew\u00e4hrleisten.</p>"},{"location":"Begriffe/Git/#mastermain","title":"Master/Main","text":"<p>In Git, einer weit verbreiteten Versionskontrollsoftware, waren \"master\" der Standardname f\u00fcr den Hauptzweig, in den alle Features und \u00c4nderungen letztendlich eingef\u00fcgt werden. Allerdings hat sich die Community dahingehend bewegt, \"main\" anstelle von \"master\" zu verwenden, um problematische Konnotationen des Begriffs \"master\" zu vermeiden. Beide Begriffe beziehen sich also auf den Hauptzweig eines Git-Projekts, aber \"main\" ist der aktuell bevorzugte Begriff.</p>"},{"location":"Begriffe/Git/#geschutzte_branches_protected_branches","title":"Gesch\u00fctzte Branches (Protected Branches)","text":"<p>In Git k\u00f6nnen bestimmte Branches als \"gesch\u00fctzt\" gekennzeichnet werden. Dies bedeutet, dass f\u00fcr diese Branches besondere Regeln gelten, um zu verhindern, dass sie versehentlich oder sch\u00e4dlich ver\u00e4ndert werden. Zum Beispiel k\u00f6nnte ein gesch\u00fctzter Branch das L\u00f6schen oder das direkte Pushen ohne Pull Request verhindern. Insbesondere der Hauptzweig eines Projekts (master/main) ist oft ein gesch\u00fctzter Branch.</p>"},{"location":"Begriffe/Jobs/","title":"Jobs","text":"<p>Es gibt in der IT verschiedenste Bezeichnungen f\u00fcr Rollen und Jobs. Hier sind einige davon.</p>"},{"location":"Begriffe/Jobs/#devops","title":"DevOps","text":"<p>DevOps steht f\u00fcr \"Development\" (Entwicklung) und \"Operations\" (Betrieb). Es handelt sich um eine Praktik und Kultur, die darauf abzielt, die Zusammenarbeit und Kommunikation zwischen Entwicklern (Developers) und Betriebsteams (Operations) zu verbessern. DevOps zielt darauf ab, die Entwicklung, Bereitstellung und Wartung von Software effizienter und reibungsloser zu gestalten, indem Entwicklungsund Betriebsteams zusammenarbeiten und Verantwortung teilen.</p>"},{"location":"Begriffe/Jobs/#qa","title":"QA","text":"<p>QA steht f\u00fcr \"Quality Assurance\" (Qualit\u00e4tssicherung). Es bezieht sich auf den Prozess, bei dem sicherstellt wird, dass Software oder Anwendungen den erforderlichen Qualit\u00e4tsstandards entsprechen. QA-Teams oder QA-Engineers sind f\u00fcr die Durchf\u00fchrung von Tests und \u00dcberpr\u00fcfungen verantwortlich, um sicherzustellen, dass die Software korrekt funktioniert, frei von Fehlern ist und den Anforderungen und Spezifikationen entspricht.</p>"},{"location":"Begriffe/Jobs/#entwickler","title":"Entwickler","text":"<p>Entwickler sind Fachleute, die Software oder Anwendungen erstellen. Sie schreiben den Code, implementieren Funktionen, erstellen Algorithmen und entwickeln L\u00f6sungen f\u00fcr spezifische Anforderungen. Entwickler k\u00f6nnen in verschiedenen Programmiersprachen arbeiten und nutzen Entwicklungsframeworks und Tools, um effizienten und qualitativ hochwertigen Code zu schreiben.</p>"},{"location":"Begriffe/Jobs/#admins","title":"Admins","text":"<p>Admins, oder Administratoren, sind Fachleute, die f\u00fcr die Verwaltung und den Betrieb von Systemen, Netzwerken oder Infrastrukturen verantwortlich sind. Sie stellen sicher, dass die IT-Infrastruktur ordnungsgem\u00e4\u00df funktioniert, konfigurieren und verwalten Server, Netzwerke und Datenbanken und k\u00fcmmern sich um die Wartung, \u00dcberwachung und Sicherheit der Systeme.</p>"},{"location":"Begriffe/Jobs/#popm","title":"PO/PM","text":"<p>Product Owner und Product Manager sind Rollen in der Produktentwicklung, insbesondere in agilen Arbeitsumgebungen. Beide Rollen tragen dazu bei, dass das Produkt eine klare Vision hat und den Bed\u00fcrfnissen der Kunden entspricht, aber sie haben unterschiedliche Verantwortlichkeiten und Zust\u00e4ndigkeiten.</p>"},{"location":"Begriffe/Jobs/#product_owner_po","title":"Product Owner (PO)","text":"<p>Der Product Owner ist eine Rolle in agilen Entwicklungsmethoden wie Scrum. Der PO ist die Verbindung zwischen dem Entwicklungsteam und den Stakeholdern. Die Hauptaufgaben des POs bestehen darin, die Produktvision zu definieren und das sogenannte \"Product Backlog\" zu verwalten, eine Liste von Aufgaben und Anforderungen, die das Produkt erf\u00fcllen muss.</p> <p>Zu den Verantwortlichkeiten des Product Owners geh\u00f6ren:</p> <ul> <li>Definition und Priorisierung des Product Backlogs.</li> <li>Sicherstellung, dass das Team den Wert jeder Aufgabe versteht.</li> <li>Arbeit mit Stakeholdern, um deren Bed\u00fcrfnisse und Anforderungen zu verstehen.</li> <li>Arbeit mit dem Entwicklungsteam, um zu gew\u00e4hrleisten, dass das Produkt in der vorgesehenen Weise erstellt wird.</li> <li>Entscheidung, welche Funktionen in jedem Sprint (Entwicklungszyklus) implementiert werden.</li> </ul>"},{"location":"Begriffe/Jobs/#product_manager_pm","title":"Product Manager (PM)","text":"<p>Der Product Manager hat eine breitere Rolle und ist verantwortlich f\u00fcr das gesamte Leben eines Produkts, von der Ideenfindung \u00fcber die Entwicklung bis hin zum Marktstart und dar\u00fcber hinaus. PMs arbeiten oft in Organisationen, die nicht unbedingt agile Entwicklungsmethoden anwenden.</p> <p>Zu den Verantwortlichkeiten des Product Managers geh\u00f6ren:</p> <ul> <li>Festlegung der Produktstrategie und Roadmap.</li> <li>Arbeit mit verschiedenen Teams (Entwicklung, Vertrieb, Marketing usw.), um das Produkt zu entwickeln und auf den Markt zu bringen.</li> <li>Marktforschung zur Identifizierung von Kundenbed\u00fcrfnissen und Marktchancen.</li> <li>Festlegung von Preisstrategien und Gesch\u00e4ftsmodellen.</li> <li>Kommunikation der Produktvision und -strategie an alle relevanten Stakeholder.</li> </ul> <p>In einigen Organisationen k\u00f6nnen die Rollen des Product Owners und des Product Managers \u00fcberschneiden oder von einer Person ausgef\u00fcllt werden. In anderen Organisationen k\u00f6nnen sie klar voneinander getrennt sein, wobei der Product Owner mehr auf die taktische Durchf\u00fchrung und der Product Manager mehr auf die strategische Seite des Produktmanagements konzentriert ist.</p>"},{"location":"Begriffe/Netzwerk/","title":"Netzwerk","text":"<p>Beschtes Video von \"Die Sendung mit der Maus\" https://youtu.be/fpqhjEtznVk?t=76</p>"},{"location":"Begriffe/Netzwerk/#ip_adressen","title":"IP Adressen","text":"<p>Eine IP-Adresse (Internet Protocol-Adresse) ist eine numerische Kennung, die einem Ger\u00e4t zugewiesen wird, das mit einem Netzwerk verbunden ist. Sie erm\u00f6glicht die Identifizierung und das Routing von Datenpaketen zwischen verschiedenen Ger\u00e4ten in einem Netzwerk. Es gibt verschiedene Versionen von IP-Adressen, aber die gebr\u00e4uchlichste ist die IPv4, die aus vier Zahlenbl\u00f6cken besteht, die durch Punkte getrennt sind (z. B. 192.168.0.1). Mit der Einf\u00fchrung von IPv6 k\u00f6nnen noch mehr IP-Adressen generiert werden, um dem wachsenden Bedarf gerecht zu werden.</p>"},{"location":"Begriffe/Netzwerk/#ports","title":"Ports","text":"<p>Ports sind nummerierte Kan\u00e4le auf einem Ger\u00e4t, die bestimmten Anwendungen oder Diensten zugeordnet werden. Ports erm\u00f6glichen die gleichzeitige Kommunikation mehrerer Anwendungen \u00fcber das Netzwerk. Sie werden oft mit der IP-Adresse kombiniert, um eine bestimmte Anwendung auf einem bestimmten Ger\u00e4t zu identifizieren. Ein Port wird durch eine 16-Bit-Zahl dargestellt und kann Werte von 0 bis 65535 haben. Es gibt bestimmte Standardports, die f\u00fcr bestimmte Dienste reserviert sind, wie z. B. Port 80 f\u00fcr HTTP (Hypertext Transfer Protocol) oder Port 443 f\u00fcr HTTPS (Hypertext Transfer Protocol Secure).</p>"},{"location":"Begriffe/Netzwerk/#eli5","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest eine wichtige Nachricht an einen Freund schicken. Du wei\u00dft, dass dein Freund in einem gro\u00dfen Geb\u00e4ude wohnt, das viele verschiedene R\u00e4ume hat. Aber wie findest du heraus, in welchem Raum sich dein Freund befindet?</p> <p>Hier kommen Ports ins Spiel. Stell dir vor, das Geb\u00e4ude hat viele T\u00fcren, und jede T\u00fcr hat eine Nummer. Jeder Raum in dem Geb\u00e4ude hat eine bestimmte Funktion oder Aufgabe. Ein Port ist wie eine T\u00fcr mit einer Nummer, die zu einem bestimmten Raum f\u00fchrt.</p> <p>Wenn du eine Nachricht an deinen Freund senden m\u00f6chtest, musst du wissen, welchen Raum er sich gerade aufh\u00e4lt. Indem du die richtige T\u00fcr mit der passenden Nummer benutzt, kannst du sicherstellen, dass deine Nachricht den richtigen Raum erreicht.</p> <p>Im Computerbereich funktioniert es \u00e4hnlich. Ein Port ist eine Nummer, die einem bestimmten Dienst oder einer bestimmten Anwendung auf einem Computer zugeordnet ist. Wenn Daten von einem Ger\u00e4t zu einem anderen \u00fcber das Netzwerk gesendet werden, m\u00fcssen sie wissen, welchen Port sie erreichen m\u00fcssen, um zur richtigen Anwendung oder zum richtigen Dienst zu gelangen.</p> <p>Es gibt Tausende von Ports, die f\u00fcr verschiedene Zwecke reserviert sind. Einige Ports sind Standardports, die f\u00fcr bestimmte Dienste reserviert sind. Zum Beispiel ist Port 80 der Standardport f\u00fcr unverschl\u00fcsselte Webseiten (HTTP), w\u00e4hrend Port 443 f\u00fcr verschl\u00fcsselte Webseiten (HTTPS) verwendet wird. Port 22 wird oft f\u00fcr sichere Fernzugriffsverbindungen (SSH) verwendet.</p> <p>Ports sind also wie die Nummern an den T\u00fcren in einem gro\u00dfen Geb\u00e4ude. Sie helfen dabei, Datenpakete an die richtigen Anwendungen oder Dienste auf Computern zu senden, wenn sie \u00fcber das Netzwerk kommunizieren.</p>"},{"location":"Begriffe/Netzwerk/#protokolle","title":"Protokolle","text":"<p>Protokolle sind Regeln und Verfahren, die es Ger\u00e4ten erm\u00f6glichen, miteinander zu kommunizieren und Daten auszutauschen. Sie legen fest, wie Daten organisiert, gesendet, empfangen und interpretiert werden sollen. Es gibt verschiedene Netzwerkprotokolle f\u00fcr unterschiedliche Zwecke. Einige bekannte Protokolle sind TCP (Transmission Control Protocol) und UDP (User Datagram Protocol) f\u00fcr die zuverl\u00e4ssige bzw. unzuverl\u00e4ssige \u00dcbertragung von Datenpaketen, IP (Internet Protocol) f\u00fcr die Adressierung und das Routing von Paketen und HTTP (Hypertext Transfer Protocol) f\u00fcr den Austausch von Hypertext-Dokumenten \u00fcber das World Wide Web.</p>"},{"location":"Begriffe/Netzwerk/#eli5_1","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest mit einem Freund sprechen, der in einem anderen Land lebt und eine andere Sprache spricht. Wie kannst du sicherstellen, dass ihr euch trotzdem verstehen k\u00f6nnt?</p> <p>Protokolle sind wie Regeln, die sicherstellen, dass die Kommunikation zwischen dir und deinem Freund reibungslos verl\u00e4uft. Sie sind wie eine spezielle Sprache, die von beiden Seiten verstanden wird.</p> <p>Wenn du mit deinem Freund sprechen m\u00f6chtest, musst du bestimmte Dinge beachten. Du musst wissen, welche Sprache ihr beide sprecht, wie ihr euch gr\u00fc\u00dft, wie ihr Fragen stellt und wie ihr Antworten gebt. Das sind alles Teile eines Protokolls.</p> <p>Im Computerbereich sind Protokolle \u00e4hnlich. Wenn Ger\u00e4te \u00fcber das Netzwerk miteinander kommunizieren m\u00f6chten, m\u00fcssen sie bestimmte Regeln einhalten. Diese Regeln werden als Protokolle bezeichnet. Sie legen fest, wie Daten organisiert, gesendet, empfangen und interpretiert werden sollen.</p> <p>Ein bekanntes Protokoll ist das Hypertext Transfer Protocol (HTTP). Es wird verwendet, wenn du eine Website besuchst. Das HTTP-Protokoll definiert, wie dein Webbrowser eine Anfrage an einen Webserver sendet und wie der Server die gew\u00fcnschten Informationen zur\u00fcckschickt.</p> <p>Es gibt auch das Internet Protocol (IP), das die Adressierung und das Routing von Datenpaketen im Internet regelt. Es sorgt daf\u00fcr, dass die Datenpakete von einem Ger\u00e4t zum anderen gelangen.</p> <p>Ein weiteres Beispiel ist das Simple Mail Transfer Protocol (SMTP), das verwendet wird, um E-Mails zu versenden. Es definiert, wie E-Mail-Clients E-Mails an E-Mail-Server senden und wie diese Server die E-Mails an die Empf\u00e4nger zustellen.</p> <p>Protokolle stellen sicher, dass die Kommunikation zwischen verschiedenen Ger\u00e4ten und Anwendungen reibungslos abl\u00e4uft, \u00e4hnlich wie die Regeln, die sicherstellen, dass du dich mit deinem Freund auf eine gemeinsame Sprache einigst, um euch zu verst\u00e4ndigen.</p>"},{"location":"Begriffe/Netzwerk/#httphttps","title":"HTTP/HTTPS","text":"<p>Der Typ (HTTP, HTTPS) bezieht sich auf das Protokoll, das f\u00fcr die Kommunikation zwischen einem Webbrowser und einem Webserver verwendet wird. HTTP steht f\u00fcr Hypertext Transfer Protocol und war das urspr\u00fcngliche Protokoll f\u00fcr den Datenaustausch im Web. Es erm\u00f6glicht die \u00dcbertragung von HTML-Seiten, Bildern, Videos und anderen Dateien \u00fcber das Internet. HTTPS steht f\u00fcr Hypertext Transfer Protocol Secure und ist eine verschl\u00fcsselte Version von HTTP. HTTPS verwendet eine zus\u00e4tzliche Sicherheitsschicht (SSL/TLS), um die Kommunikation zwischen dem Webbrowser und dem Webserver abzusichern. Es wird h\u00e4ufig f\u00fcr Websites verwendet, die sensible Informationen wie Passw\u00f6rter, Kreditkartendaten oder pers\u00f6nliche Daten \u00fcbertragen.</p>"},{"location":"Begriffe/Netzwerk/#eli5_2","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest einen Brief an jemanden schreiben und ihm etwas mitteilen. Aber anstatt den Brief pers\u00f6nlich zu \u00fcbergeben, m\u00f6chtest du ihn \u00fcber das Internet verschicken. Hier kommt HTTP ins Spiel.</p> <p>HTTP steht f\u00fcr \"Hypertext Transfer Protocol\". Das klingt nach einem komplizierten Namen, aber es ist im Grunde genommen eine Methode, um Informationen zwischen deinem Webbrowser (wie Chrome oder Firefox) und einer Website auszutauschen.</p> <p>Wenn du eine Website in deinen Webbrowser eingibst und auf \"Enter\" dr\u00fcckst, sendet dein Browser eine Nachricht an die Website. Diese Nachricht enth\u00e4lt Anfragen wie \"Zeige mir die Homepage\" oder \"Gib mir die neuesten Nachrichten\".</p> <p>Die Website erh\u00e4lt diese Anfrage und antwortet mit einer Nachricht, die die gew\u00fcnschten Informationen enth\u00e4lt. Es ist, als ob du einen Brief an jemanden schreibst und darauf wartest, dass er dir antwortet.</p> <p>HTTP ist also wie die Sprache, in der dein Webbrowser und die Website miteinander kommunizieren. Es erm\u00f6glicht deinem Browser, Anfragen zu stellen und Informationen von der Website abzurufen.</p> <p>HTTP ist auch der Grund, warum du Links auf Webseiten anklicken kannst. Wenn du auf einen Link klickst, sendet dein Browser eine neue Anfrage an eine andere Seite und erh\u00e4lt die entsprechenden Informationen zur\u00fcck, um sie in deinem Browser anzuzeigen.</p> <p>Insgesamt sorgt HTTP daf\u00fcr, dass du im Internet surfen, Websites besuchen und Informationen abrufen kannst, indem es die Kommunikation zwischen deinem Webbrowser und den Websites regelt. Es ist wie die Sprache, in der dein Computer mit dem Rest des Internets spricht.</p>"},{"location":"Begriffe/Netzwerk/#firewall","title":"Firewall","text":"<p>Firewalls sind Sicherheitsvorrichtungen, die den Datenverkehr zwischen Netzwerken \u00fcberwachen und kontrollieren. Sie setzen Regeln und Richtlinien, um unerw\u00fcnschte oder sch\u00e4dliche Daten zu blockieren und das Netzwerk vor Bedrohungen zu sch\u00fctzen. Dadurch werden Angriffe, Viren und unautorisierte Zugriffe verhindert, w\u00e4hrend die Sicherheit und Integrit\u00e4t des Netzwerks gew\u00e4hrleistet werden.</p>"},{"location":"Begriffe/Netzwerk/#eli5_3","title":"ELI5","text":"<p>Stell dir vor, du hast ein magisches Tor, das entscheidet, wer in dein Zimmer kommen darf und wer nicht. Die Firewall ist wie dieses magische Tor f\u00fcr deinen Computer.</p> <p>Die Firewall schaut sich alle Informationen an, die in deinen Computer kommen oder aus ihm herausgehen wollen. Sie \u00fcberpr\u00fcft, ob diese Informationen sicher und erlaubt sind oder ob sie sch\u00e4dlich sind und drau\u00dfen bleiben sollten.</p> <p>Die Firewall hat Regeln, die ihr sagen, was erlaubt ist und was nicht. Zum Beispiel kann sie sagen: \"E-Mails d\u00fcrfen hereinkommen, aber nur von vertrauensw\u00fcrdigen Absendern.\" Oder sie kann sagen: \"B\u00f6sartige Websites d\u00fcrfen nicht in deinen Computer gelangen.\"</p> <p>Die Firewall hilft also dabei, deinen Computer vor Gefahren zu sch\u00fctzen, indem sie unerw\u00fcnschte oder gef\u00e4hrliche Dinge blockiert. Sie ist wie ein W\u00e4chter, der sicherstellt, dass nur die guten und sicheren Dinge in deinen Computer gelangen d\u00fcrfen.</p>"},{"location":"Begriffe/Netzwerk/#dns","title":"DNS","text":"<p>DNS steht f\u00fcr Domain Name System. Es ist wie ein Telefonbuch des Internets, das hilft, die Namen von Websites in die zugeh\u00f6rigen IP-Adressen zu \u00fcbersetzen.</p> <p>Stell dir vor, du m\u00f6chtest eine Website wie \"www.beispiel.com\" besuchen. Aber Computer kommunizieren \u00fcber IP-Adressen, wie z. B. 192.168.0.1. Hier kommt DNS ins Spiel.</p> <p>Das DNS-System besteht aus Servern und Protokollen, die die Namensaufl\u00f6sung erm\u00f6glichen. Wenn du den Namen einer Website eingibst, sendet dein Computer eine Anfrage an den DNS-Server. Der DNS-Server \u00fcbersetzt dann den Namen in die entsprechende IP-Adresse und gibt sie an deinen Computer zur\u00fcck.</p> <p>DNS ist wichtig, weil es den Menschen erm\u00f6glicht, sich leicht an Namen wie \"beispiel.com\" zu erinnern, anstatt sich IP-Adressen merken zu m\u00fcssen. Es vereinfacht die Kommunikation im Internet und erm\u00f6glicht es uns, Websites \u00fcber ihre Namen zu erreichen.</p> <p>Zusammenfassend gesagt ist DNS ein System, das die Namen von Websites in die zugeh\u00f6rigen IP-Adressen \u00fcbersetzt. Es macht es einfacher, Websites \u00fcber Namen statt \u00fcber IP-Adressen zu erreichen und spielt eine wichtige Rolle bei der Kommunikation im Internet.</p>"},{"location":"Begriffe/Netzwerk/#api","title":"API","text":"<p>API steht f\u00fcr \"Application Programming Interface\". Es handelt sich dabei um eine Sammlung von Regeln und Protokollen, die festlegen, wie verschiedene Softwareanwendungen oder -komponenten miteinander interagieren und kommunizieren sollen. Sie k\u00f6nnen sich eine API als eine Art Speisekarte in einem Restaurant vorstellen. Die Speisekarte bietet eine Liste von Gerichten, die Sie bestellen k\u00f6nnen, zusammen mit einer Beschreibung dessen, was jedes Gericht beinhaltet. In \u00e4hnlicher Weise definiert eine API eine Liste von Funktionen oder Diensten, die von einer Softwareanwendung bereitgestellt werden, zusammen mit Anweisungen dar\u00fcber, wie diese Funktionen oder Dienste verwendet werden k\u00f6nnen.</p> <p>Es gibt verschiedene Arten von APIs, aber hier sind ein paar Beispiele, um Ihnen eine Vorstellung zu geben:</p> <ul> <li>Web-APIs<ul> <li>oft auch als HTTP-APIs oder REST-APIs bezeichnet, erm\u00f6glichen die Kommunikation zwischen verschiedenen Softwareanwendungen \u00fcber das Internet. Zum Beispiel k\u00f6nnte eine Wetter-App eine Web-API verwenden, um Wetterdaten von einem Server abzurufen.</li> </ul> </li> <li>Betriebssystem-APIs<ul> <li>definieren, wie Anwendungen mit einem Betriebssystem interagieren k\u00f6nnen. Zum Beispiel k\u00f6nnte eine Anwendung eine Betriebssystem-API verwenden, um ein Fenster auf dem Bildschirm zu \u00f6ffnen oder um Zugriff auf Dateien auf der Festplatte zu erhalten.</li> </ul> </li> <li>Bibliothekoder Framework-APIs<ul> <li>definieren, wie Anwendungen mit einer bestimmten Softwarebibliothek oder einem Framework interagieren k\u00f6nnen. Zum Beispiel k\u00f6nnte eine Anwendung eine Bibliotheks-API verwenden, um komplexe mathematische Berechnungen durchzuf\u00fchren oder um eine Datenbank abzufragen.</li> </ul> </li> </ul> <p>APIs sind ein grundlegender Baustein der modernen Softwareentwicklung und erm\u00f6glichen es Entwicklern, komplexe Anwendungen zu erstellen, die auf den Funktionen und Diensten aufbauen, die von anderen zur Verf\u00fcgung gestellt werden.</p>"},{"location":"Begriffe/Netzwerk/#api_call","title":"API Call","text":"<p>Ein API-Call ist eine Anfrage, die an eine API (Application Programming Interface) gesendet wird, um eine bestimmte Funktion auszuf\u00fchren. APIs sind im Grunde genommen eine Art von Vertrag zwischen verschiedenen Softwareanwendungen, die festlegt, wie sie miteinander kommunizieren und Daten austauschen k\u00f6nnen.</p> <p>Ein API-Call besteht normalerweise aus mehreren Teilen:</p> <ul> <li>Die Basis-URL:<ul> <li>Dies ist die grundlegende Webadresse, an die der Call gesendet wird.</li> </ul> </li> <li>Der Endpunkt:<ul> <li>Dies ist der spezifische Pfad an der Basis-URL, der auf eine bestimmte Ressource oder eine Sammlung von Ressourcen verweist.</li> </ul> </li> <li>Die Methode:<ul> <li>Dies gibt an, welche Art von Aktion ausgef\u00fchrt werden soll. In einer RESTful API, einer der gebr\u00e4uchlichsten Arten von APIs, gibt es meist vier Methoden: GET (Daten abrufen), POST (neue Daten erstellen), PUT oder PATCH (bestehende Daten aktualisieren) und DELETE (Daten l\u00f6schen).</li> </ul> </li> <li>Die Parameter oder der Body:<ul> <li>Dies sind zus\u00e4tzliche Informationen, die mit dem API-Call gesendet werden k\u00f6nnen. Bei einem GET-Request k\u00f6nnten dies zum Beispiel Suchparameter sein, die angeben, welche Daten genau abgerufen werden sollen. Bei einem POST-, PUToder PATCH-Request k\u00f6nnte es sich um die tats\u00e4chlichen Daten handeln, die erstellt oder aktualisiert werden sollen.</li> </ul> </li> </ul> <p>So k\u00f6nnte beispielsweise ein API-Call an eine Wetter-API aussehen: <code>GET https://api.weather.com/v3/wx/forecast/daily/5day?apiKey=YOUR_API_KEY&amp;geocode=37.7,-122.4</code>. Dieser Call verwendet die GET-Methode, um die 5-Tage-Wettervorhersage f\u00fcr die geographischen Koordinaten 37.7,-122.4 (San Francisco) von der <code>api.weather.com</code> API abzurufen.</p>"},{"location":"Begriffe/Netzwerk/#cloudfront","title":"Cloudfront","text":"<p>Amazon CloudFront ist ein Content-Delivery-Network (CDN) Service, der von Amazon Web Services (AWS) angeboten wird. Ein CDN ist ein Netzwerk verteilter Server, die Inhalte zu Nutzern basierend auf deren geografischer Lage ausliefern.</p> <p>Die Hauptfunktion von CloudFront ist es, Daten, Videos, Anwendungen und APIs sicher und mit hoher Geschwindigkeit und geringer Latenz an Nutzer weltweit zu liefern. CloudFront ist tief in das AWS-Netzwerk integriert, was es zu einem geeigneten CDN f\u00fcr die Lieferung von Inhalten macht, die in anderen AWS-Diensten gehostet werden, wie z.B. in Amazon S3 (Simple Storage Service), Amazon EC2 (Elastic Compute Cloud) oder AWS Elastic Load Balancing.</p> <p>Einige der Hauptfunktionen von CloudFront umfassen:</p> <ul> <li> <p>Edge Locations: CloudFront verwendet ein Netzwerk von \"Edge Locations\" auf der ganzen Welt, um Inhalte n\u00e4her an die Nutzer zu bringen, was die Latenz reduziert. Wenn ein Nutzer eine Anfrage an einen Inhalt stellt, wird die Anfrage an die n\u00e4chstgelegene Edge Location weitergeleitet, um eine schnelle Lieferung zu gew\u00e4hrleisten.</p> </li> <li> <p>Caching: CloudFront speichert Kopien von Inhalten (d.h. es erstellt ein Cache) an diesen Edge Locations, so dass wiederholte Anfragen nach dem gleichen Inhalt schneller bedient werden k\u00f6nnen, ohne dass die Anfrage jedes Mal bis zum Ursprungsserver zur\u00fcckgehen muss.</p> </li> <li> <p>Sicherheit: CloudFront bietet Sicherheitsfunktionen wie SSL/TLS f\u00fcr sichere Netzwerkverbindungen, AWS Shield f\u00fcr DDoS-Schutz und AWS WAF (Web Application Firewall) f\u00fcr den Schutz vor webbasierten Bedrohungen. Dar\u00fcber hinaus unterst\u00fctzt es auch die Anforderungen des Identity and Access Management (IAM) von AWS.</p> </li> <li> <p>Integration: Wie bereits erw\u00e4hnt, ist CloudFront tief in das AWS-\u00d6kosystem integriert, was bedeutet, dass es einfach ist, es mit anderen AWS-Diensten zu verwenden, und es ist auch einfach, mit CloudFront \u00fcber die AWS-Managementkonsole, CLI (Command Line Interface) und SDKs (Software Development Kits) zu interagieren.</p> </li> </ul> <p>Das sind nur einige der Funktionen von Amazon CloudFront. Es bietet auch Unterst\u00fctzung f\u00fcr benutzerdefinierte SSL-Zertifikate, das Streaming von Live- und On-Demand-Videos, und es ist kompatibel mit mehreren Protokollen, einschlie\u00dflich HTTP, HTTPS, RTMP und mehr.</p>"},{"location":"Begriffe/Pipelines/","title":"Pipelines","text":""},{"location":"Begriffe/Pipelines/#das_konzept_pipeline","title":"Das Konzept Pipeline","text":"<p>In der Softwareentwicklung ist eine Pipeline wie eine Flie\u00dfbandproduktion f\u00fcr den Code. Stell dir vor, du hast ein Team von Entwicklern, die an einer Anwendung arbeiten. Jeder Entwickler hat seinen eigenen Aufgabenbereich, und der Code muss von einem Schritt zum n\u00e4chsten \u00fcbergehen, um letztendlich in der fertigen Anwendung zu landen.</p> <p>Eine Pipeline ist der Prozess, der den Code durch verschiedene Schritte f\u00fchrt, um ihn zu entwickeln, zu testen und bereitzustellen. Diese Schritte k\u00f6nnen beispielsweise das Kompilieren des Codes, das Durchf\u00fchren automatisierter Tests, das Erstellen von Bin\u00e4rdateien oder das Bereitstellen der Anwendung auf einem Server beinhalten.</p> <p>Die Idee hinter einer Pipeline ist, die Entwicklung und Bereitstellung von Code zu automatisieren und zu standardisieren. Dadurch werden potenzielle Fehler minimiert und die Effizienz erh\u00f6ht. Jeder Schritt in der Pipeline kann automatisiert und \u00fcberwacht werden, um sicherzustellen, dass der Code reibungslos durchl\u00e4uft und qualitativ hochwertig ist.</p> <p>Eine Pipeline kann auch verschiedene Umgebungen durchlaufen, wie zum Beispiel eine Entwicklungs-, Test und Produktionsumgebung. Jeder Schritt wird separat in der Pipeline durchgef\u00fchrt, um sicherzustellen, dass der Code in jeder Umgebung gut funktioniert, bevor er zur n\u00e4chsten \u00fcbergeht.</p> <p>Pipelines k\u00f6nnen mit Hilfe von Tools und Plattformen wie Jenkins, Travis CI oder GitLab CI/CD erstellt und verwaltet werden. Diese Tools erm\u00f6glichen es Entwicklern, die Schritte in der Pipeline zu konfigurieren, Abh\u00e4ngigkeiten festzulegen und die Automatisierung der Entwicklungsumgebung zu unterst\u00fctzen.</p> <p>Insgesamt erm\u00f6glichen Pipelines eine effiziente und automatisierte Entwicklung und Bereitstellung von Code. Sie verbessern die Qualit\u00e4t, reduzieren die Fehleranf\u00e4lligkeit und beschleunigen den Prozess der Softwareentwicklung.</p>"},{"location":"Begriffe/Pipelines/#tools","title":"Tools","text":""},{"location":"Begriffe/Pipelines/#aws_step_functions","title":"AWS Step Functions","text":"<p>AWS Step Functions ist ein Serverless-Workflow-Service von Amazon Web Services, der es Entwicklern erm\u00f6glicht, komplexe Prozesse oder Workflows zu koordinieren und zu verwalten, indem sie mehrere AWS-Services in einer bestimmten Reihenfolge aufrufen.</p> <p>Mit AWS Step Functions k\u00f6nnen Sie visuelle Workflows erstellen, die eine Reihe von Schritten oder \"States\" darstellen. Jeder dieser States kann eine Aufgabe repr\u00e4sentieren, die von einem AWS-Service ausgef\u00fchrt wird, wie zum Beispiel das Starten einer Lambda-Funktion, das Lesen oder Schreiben in eine DynamoDB-Tabelle oder das Warten auf eine bestimmte Zeit.</p> <p>Einige der Vorteile von AWS Step Functions sind:</p> <ul> <li>Verwaltung komplexer Workflows:<ul> <li>Mit Step Functions k\u00f6nnen Sie mehrstufige Anwendungen erstellen und verwalten, die eine Vielzahl von AWS-Services umfassen. Dies kann besonders n\u00fctzlich sein, wenn Sie komplexe Gesch\u00e4ftsprozesse oder rechenintensive Aufgaben ausf\u00fchren, die mehrere Schritte erfordern.</li> </ul> </li> <li>Fehlerbehandlung:<ul> <li>Step Functions bietet integrierte Funktionen zur Fehlerbehandlung, darunter Retries und Catch-Bl\u00f6cke, die es Ihnen erm\u00f6glichen, auf Fehler zu reagieren und Ihre Workflows entsprechend zu steuern.</li> </ul> </li> <li>Visualisierung:<ul> <li>Step Functions bietet eine grafische Konsole, mit der Sie Ihre Workflows visuell darstellen und verfolgen k\u00f6nnen. Dies kann Ihnen helfen, den Status und Fortschritt Ihrer Anwendung zu verstehen und Probleme schneller zu erkennen und zu beheben.</li> </ul> </li> <li>Skalierbarkeit und Verf\u00fcgbarkeit:<ul> <li>Als ein serverloser Dienst skaliert Step Functions automatisch auf die Anforderungen Ihrer Anwendung und bietet eine hohe Verf\u00fcgbarkeit und Zuverl\u00e4ssigkeit.</li> </ul> </li> </ul> <p>Ein h\u00e4ufiges Anwendungsbeispiel f\u00fcr Step Functions ist die Koordination von Microservices. Da moderne Anwendungen oft aus vielen kleineren, unabh\u00e4ngigen Diensten bestehen, k\u00f6nnen Step Functions dazu verwendet werden, diese Dienste zu orchestrieren und sicherzustellen, dass sie in der richtigen Reihenfolge und unter den richtigen Bedingungen ausgef\u00fchrt werden.</p> <p></p>"},{"location":"Begriffe/Sprachen/","title":"Sprachen","text":""},{"location":"Begriffe/Sprachen/#einleitung","title":"Einleitung","text":"<p>In der IT gibt es viele Sprachen, und jede von ihnen ist f\u00fcr einen bestimmten Zweck konzipiert. Diese Vielfalt an Programmiersprachen erm\u00f6glicht es Entwicklern, die beste Wahl f\u00fcr ihre spezifischen Anforderungen zu treffen und die am besten geeignete Sprache f\u00fcr ihre Aufgaben auszuw\u00e4hlen.</p> <p>Einige Programmiersprachen sind aufgrund ihrer Leistung und Geschwindigkeit bekannt, w\u00e4hrend andere sich durch ihre Einfachheit und Benutzerfreundlichkeit auszeichnen. Es gibt Sprachen, die sich auf die Entwicklung von Webanwendungen spezialisiert haben, w\u00e4hrend andere f\u00fcr Datenanalyse oder maschinelles Lernen optimiert sind. Jede Sprache hat ihre eigenen Syntaxregeln, Bibliotheken und Tools, die den Entwicklern helfen, effektiv zu programmieren und bestimmte Aufgaben zu erledigen.</p> <p>Die Wahl der Programmiersprache h\u00e4ngt oft von den spezifischen Anforderungen des Projekts oder der Aufgabe ab. Manchmal m\u00fcssen bestimmte Sprachen verwendet werden, um mit vorhandenen Systemen zu interagieren oder um die beste Leistung f\u00fcr eine bestimmte Anwendung zu erzielen. Andere Male kann die Wahl einer Sprache auf pers\u00f6nlichen Pr\u00e4ferenzen, dem Entwickler-Team oder der Verf\u00fcgbarkeit von Fachwissen basieren.</p> <p>Es ist wichtig zu beachten, dass das Erlernen und Beherrschen einer Programmiersprache Zeit und \u00dcbung erfordert. Jede Sprache hat ihre eigenen Konzepte, Paradigmen und Best Practices, die verstanden werden m\u00fcssen, um effizienten und qualitativ hochwertigen Code zu schreiben. Daher ist es oft hilfreich, sich auf eine oder mehrere Sprachen zu spezialisieren, die den eigenen Bed\u00fcrfnissen und Zielen am besten entsprechen.</p> <p>Insgesamt bieten die unterschiedlichen Programmiersprachen in der IT eine breite Palette an M\u00f6glichkeiten, um Software zu entwickeln und Aufgaben zu automatisieren. Durch die Auswahl der richtigen Sprache f\u00fcr eine spezifische Anforderung k\u00f6nnen Entwickler ihre Produktivit\u00e4t steigern, effiziente L\u00f6sungen entwickeln und die gew\u00fcnschten Ergebnisse erzielen.</p>"},{"location":"Begriffe/Sprachen/#unterseiten","title":"Unterseiten","text":"<ul> <li>Config</li> <li>Doku</li> <li>IaC</li> <li>Vergleiche</li> </ul>"},{"location":"Begriffe/Tools/","title":"Tools","text":"<p>In vielen dieser Dokumente werden Begriffe erkl\u00e4rt und diesbez\u00fcglich Tools genannt. Diese werden hier aufgelistet und verlinkt.</p> <p></p> <p></p> <p></p>"},{"location":"Begriffe/Verwaltung/","title":"Verwaltung","text":""},{"location":"Begriffe/Verwaltung/#strukturierung","title":"Strukturierung","text":""},{"location":"Begriffe/Verwaltung/#organizational_units","title":"Organizational Units:","text":"<p>Organisationseinheiten (auf Englisch \"Organizational Units\", abgek\u00fcrzt OUs) sind ein Konzept aus der Verwaltung von Informationssystemen und werden oft in Verbindung mit Verzeichnisdiensten wie Microsoft's Active Directory (AD) oder dem Lightweight Directory Access Protocol (LDAP) verwendet.</p> <p>Eine Organisationseinheit ist im Grunde ein Container innerhalb des Verzeichnisdienstes, in dem Benutzer, Gruppen, Computer und andere Organisationseinheiten organisiert und gruppiert werden k\u00f6nnen. Diese Strukturierung erm\u00f6glicht eine einfachere Verwaltung von Ressourcen und Richtlinien innerhalb einer Organisation.</p> <p>Zum Beispiel k\u00f6nnte eine gro\u00dfe Firma ihre Active Directory Struktur nach ihren Abteilungen organisieren, mit separaten Organisationseinheiten f\u00fcr die Personalabteilung, die IT-Abteilung, die Finanzabteilung und so weiter. Innerhalb jeder dieser Organisationseinheiten k\u00f6nnten dann Benutzer und Computer gruppiert werden, die spezifisch f\u00fcr diese Abteilung sind.</p> <p>Diese Organisationseinheiten k\u00f6nnen dann dazu verwendet werden, Sicherheitsund Zugriffsrichtlinien zu verwalten. In unserem vorherigen Beispiel k\u00f6nnte die IT-Abteilung spezielle Zugriffsrechte auf bestimmte Systeme haben, die den Benutzern in den anderen Organisationseinheiten nicht gew\u00e4hrt werden. Durch die Anwendung dieser Richtlinien auf die Organisationseinheit anstatt auf jeden einzelnen Benutzer kann die Verwaltung solcher Zugriffsrechte erheblich vereinfacht werden.</p>"},{"location":"Begriffe/Verwaltung/#eli5","title":"ELI5","text":"<p>\"Organisationseinheiten\" klingt ziemlich kompliziert, nicht wahr? Lass uns das vereinfachen.</p> <p>Stell dir vor, du hast ein gro\u00dfes Spielzeughaus mit vielen verschiedenen Zimmern - es gibt ein Zimmer f\u00fcr die K\u00fcche, eines f\u00fcr das Wohnzimmer, eines f\u00fcr das Schlafzimmer und so weiter. In jedem Zimmer platzierst du verschiedene Spielzeuge, die zu diesem Raum passen - in der K\u00fcche befinden sich Spielzeugt\u00f6pfe und -pfannen, im Wohnzimmer ein Spielzeugfernseher und so weiter.</p> <p>In einem gro\u00dfen Unternehmen mit vielen Computern und Benutzern funktioniert es \u00e4hnlich. \"Organisationseinheiten\" sind wie die Zimmer im Spielzeughaus. Sie helfen dabei, alles ordentlich zu organisieren. Zum Beispiel gibt es eine \"Organisationseinheit\" f\u00fcr die Buchhaltung, eine f\u00fcr das Marketing, eine f\u00fcr die IT-Abteilung und so weiter. In jeder dieser \"Einheiten\" befinden sich die Computer und Benutzer, die zu dieser Abteilung geh\u00f6ren.</p> <p>Und genau wie du verschiedene Spielregeln f\u00fcr jedes Zimmer im Spielzeughaus haben k\u00f6nntest (zum Beispiel \"In der K\u00fcche tun wir so, als ob wir kochen\"), so kann das Unternehmen verschiedene Regeln f\u00fcr jede Organisationseinheit festlegen. Zum Beispiel k\u00f6nnte es Regeln geben, die besagen, dass nur Benutzer in der IT-Einheit Zugriff auf bestimmte Computerprogramme haben.</p> <p>Das macht alles viel einfacher zu verwalten!</p>"},{"location":"Begriffe/Verwaltung/#authentifizierung","title":"Authentifizierung","text":""},{"location":"Begriffe/Verwaltung/#sso","title":"SSO","text":"<p>SSO steht f\u00fcr Single Sign-On und ist ein Authentifizierungsservice, der Benutzern erlaubt, mit nur einem Satz von Anmeldeinformationen auf mehrere Anwendungen zuzugreifen. Das bedeutet, dass ein Benutzer sich nur einmal anmelden muss, um auf mehrere verschiedene Dienste oder Anwendungen zugreifen zu k\u00f6nnen.</p> <p>SSO bietet eine Reihe von Vorteilen sowohl f\u00fcr die Benutzer als auch f\u00fcr die IT-Abteilung:</p> <ul> <li>Benutzerfreundlichkeit:<ul> <li>Da Benutzer sich nur einmal anmelden m\u00fcssen, um auf alle ihre Anwendungen zuzugreifen, spart SSO ihnen die Zeit und den Aufwand, sich mehrere Benutzernamen und Passw\u00f6rter zu merken und einzugeben.</li> </ul> </li> <li>Verbesserte Sicherheit:<ul> <li>SSO reduziert das Risiko von Angriffen auf Passw\u00f6rter, da weniger Anmeldeinformationen im Umlauf sind. Dar\u00fcber hinaus kann SSO mit zus\u00e4tzlichen Sicherheitsma\u00dfnahmen wie Zwei-Faktor-Authentifizierung und strengerer Passwortrichtlinie kombiniert werden.</li> </ul> </li> <li>Vereinfachtes Management:<ul> <li>F\u00fcr IT-Abteilungen kann SSO das Management von Benutzerkonten und Zugriffsrechten vereinfachen. Beispielsweise muss bei einem Mitarbeiterwechsel nur ein einziges Konto deaktiviert werden, um den Zugriff auf alle Anwendungen zu sperren.</li> </ul> </li> </ul> <p>Ein bekanntes Beispiel f\u00fcr SSO ist Google. Wenn Sie sich bei Ihrem Google-Konto anmelden, haben Sie automatisch Zugriff auf verschiedene Dienste wie Gmail, Google Docs, YouTube und Google Photos ohne weitere Anmeldungen.</p> <p>Es gibt jedoch auch einige Nachteile oder Risiken bei der Verwendung von SSO. Ein Hauptanliegen ist, dass, wenn die Anmeldeinformationen eines Benutzers kompromittiert werden, der Angreifer potenziell Zugang zu allen Anwendungen und Diensten erh\u00e4lt, die der Benutzer verwendet. Dieses Risiko kann jedoch durch die Verwendung von zus\u00e4tzlichen Sicherheitsma\u00dfnahmen wie Zwei-Faktor-Authentifizierung gemildert werden.</p>"},{"location":"Begriffe/Verwaltung/#zwei-faktor-authentifizierung","title":"Zwei-Faktor-Authentifizierung","text":"<p>Die Zwei-Faktor-Authentifizierung (2FA) ist ein Sicherheitsverfahren, das eine zus\u00e4tzliche Ebene der \u00dcberpr\u00fcfung zur Identifizierung eines Benutzers hinzuf\u00fcgt. Sie basiert auf dem Prinzip, dass eine effektive Authentifizierung mindestens zwei von drei m\u00f6glichen Authentifizierungsfaktoren erfordert: etwas, das man wei\u00df (wie ein Passwort), etwas, das man hat (wie ein physischer Schl\u00fcssel oder ein Smartphone), oder etwas, das man ist (wie ein Fingerabdruck oder ein Gesichtsscan).</p> <p>Hier sind einige g\u00e4ngige Beispiele f\u00fcr 2FA:</p> <ul> <li>SMS-Codes: Nachdem Sie Ihren Benutzernamen und Ihr Passwort eingegeben haben, sendet der Dienst eine SMS mit einem einmaligen Code an Ihr Handy. Sie m\u00fcssen diesen Code eingeben, um den Anmeldevorgang abzuschlie\u00dfen.</li> <li>Authenticator Apps: Apps wie Google Authenticator oder Authy generieren zeitlich begrenzte Codes auf Ihrem Handy, die Sie eingeben m\u00fcssen, um sich anzumelden.</li> <li>Physische Sicherheitsschl\u00fcssel: Ein Ger\u00e4t, das Sie in den USB-Port Ihres Computers einstecken, das als zweiter Faktor dient. Um sich anzumelden, m\u00fcssen Sie sowohl Ihr Passwort eingeben als auch den Schl\u00fcssel einstecken.</li> <li>Biometrische Daten: Fingerprint-Scanner auf Handys oder Gesichtserkennungstechnologien k\u00f6nnen als zweiter Faktor dienen.</li> </ul> <p>Die Zwei-Faktor-Authentifizierung bietet erheblich mehr Sicherheit als die einfache Passwortauthentifizierung. Selbst wenn jemand Ihr Passwort kennt oder err\u00e4t, k\u00f6nnen sie sich normalerweise nicht anmelden, ohne Zugang zum zweiten Faktor zu haben. Aus diesem Grund wird die Verwendung von 2FA f\u00fcr alle wichtigen Online-Konten dringend empfohlen.</p>"},{"location":"Begriffe/Verwaltung/#tools","title":"Tools","text":""},{"location":"Begriffe/Verwaltung/#okta","title":"Okta","text":"<p>Okta ist ein f\u00fchrendes Unternehmen im Bereich der Identit\u00e4tsund Zugriffsverwaltung. Sie bieten Cloud-basierte Softwarel\u00f6sungen an, die Organisationen dabei unterst\u00fctzen, die Identit\u00e4t und den Zugriff ihrer Mitarbeiter, Partner und Kunden zu verwalten.</p> <p>Die Produkte und Dienstleistungen von Okta umfassen:</p> <ul> <li>Single Sign-On (SSO):<ul> <li>Okta bietet eine SSO-L\u00f6sung, die es Benutzern erm\u00f6glicht, mit einer einzigen Anmeldung auf eine Vielzahl von Anwendungen zuzugreifen. Dies vereinfacht den Zugriff f\u00fcr Benutzer und kann die Sicherheit verbessern, indem weniger Passw\u00f6rter im Umlauf sind.</li> </ul> </li> <li>Multi-Faktor-Authentifizierung (MFA):<ul> <li>Okta bietet MFA-L\u00f6sungen an, um die Sicherheit der Benutzerkonten zu erh\u00f6hen. Dies kann die Eingabe eines Codes umfassen, der an das Telefon des Benutzers gesendet wird, oder die Verwendung biometrischer Daten wie Fingerabdr\u00fccken.</li> </ul> </li> <li>API-Zugriffsmanagement:<ul> <li>Okta erm\u00f6glicht es Entwicklern, die Identit\u00e4ts\u00fcberpr\u00fcfung in ihre Anwendungen und Dienste zu integrieren, indem es APIs und Entwicklertools bereitstellt.</li> </ul> </li> <li>Lebenszyklusmanagement:<ul> <li>Okta unterst\u00fctzt Organisationen dabei, die Konten ihrer Benutzer w\u00e4hrend ihres gesamten Lebenszyklus zu verwalten, von der Erstellung neuer Konten \u00fcber die \u00c4nderung von Zugriffsrechten bis hin zur Deaktivierung von Konten, wenn ein Mitarbeiter das Unternehmen verl\u00e4sst.</li> </ul> </li> </ul> <p>Okta zielt darauf ab, eine nahtlose und sichere Benutzererfahrung zu bieten, indem es den Zugriff auf Anwendungen und Dienste \u00fcber Ger\u00e4te und Standorte hinweg vereinfacht und gleichzeitig hohe Sicherheitsstandards aufrechterh\u00e4lt. Die L\u00f6sungen von Okta sind in vielen Branchen weit verbreitet, darunter Technologie, Bildung, Gesundheitswesen und Finanzen.</p>"},{"location":"Begriffe/Netzwerk/Protokolle/","title":"Protokolle","text":""},{"location":"Begriffe/Netzwerk/Protokolle/#was_sind_protokolle","title":"Was Sind Protokolle?","text":"<p>Protokolle sind Regeln und Verfahren, die es Ger\u00e4ten erm\u00f6glichen, miteinander zu kommunizieren und Daten auszutauschen. Sie legen fest, wie Daten organisiert, gesendet, empfangen und interpretiert werden sollen. Es gibt verschiedene Netzwerkprotokolle f\u00fcr unterschiedliche Zwecke. Einige bekannte Protokolle sind TCP (Transmission Control Protocol) und UDP (User Datagram Protocol) f\u00fcr die zuverl\u00e4ssige bzw. unzuverl\u00e4ssige \u00dcbertragung von Datenpaketen, IP (Internet Protocol) f\u00fcr die Adressierung und das Routing von Paketen und HTTP (Hypertext Transfer Protocol) f\u00fcr den Austausch von Hypertext-Dokumenten \u00fcber das World Wide Web.</p>"},{"location":"Begriffe/Netzwerk/Protokolle/#eli5","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest mit einem Freund sprechen, der in einem anderen Land lebt und eine andere Sprache spricht. Wie kannst du sicherstellen, dass ihr euch trotzdem verstehen k\u00f6nnt?</p> <p>Protokolle sind wie Regeln, die sicherstellen, dass die Kommunikation zwischen dir und deinem Freund reibungslos verl\u00e4uft. Sie sind wie eine spezielle Sprache, die von beiden Seiten verstanden wird.</p> <p>Wenn du mit deinem Freund sprechen m\u00f6chtest, musst du bestimmte Dinge beachten. Du musst wissen, welche Sprache ihr beide sprecht, wie ihr euch gr\u00fc\u00dft, wie ihr Fragen stellt und wie ihr Antworten gebt. Das sind alles Teile eines Protokolls.</p> <p>Im Computerbereich sind Protokolle \u00e4hnlich. Wenn Ger\u00e4te \u00fcber das Netzwerk miteinander kommunizieren m\u00f6chten, m\u00fcssen sie bestimmte Regeln einhalten. Diese Regeln werden als Protokolle bezeichnet. Sie legen fest, wie Daten organisiert, gesendet, empfangen und interpretiert werden sollen.</p> <p>Ein bekanntes Protokoll ist das Hypertext Transfer Protocol (HTTP). Es wird verwendet, wenn du eine Website besuchst. Das HTTP-Protokoll definiert, wie dein Webbrowser eine Anfrage an einen Webserver sendet und wie der Server die gew\u00fcnschten Informationen zur\u00fcckschickt.</p> <p>Es gibt auch das Internet Protocol (IP), das die Adressierung und das Routing von Datenpaketen im Internet regelt. Es sorgt daf\u00fcr, dass die Datenpakete von einem Ger\u00e4t zum anderen gelangen.</p> <p>Ein weiteres Beispiel ist das Simple Mail Transfer Protocol (SMTP), das verwendet wird, um E-Mails zu versenden. Es definiert, wie E-Mail-Clients E-Mails an E-Mail-Server senden und wie diese Server die E-Mails an die Empf\u00e4nger zustellen.</p> <p>Protokolle stellen sicher, dass die Kommunikation zwischen verschiedenen Ger\u00e4ten und Anwendungen reibungslos abl\u00e4uft, \u00e4hnlich wie die Regeln, die sicherstellen, dass du dich mit deinem Freund auf eine gemeinsame Sprache einigst, um euch zu verst\u00e4ndigen.</p>"},{"location":"Begriffe/Netzwerk/Protokolle/#ip_adressen","title":"IP Adressen","text":"<p>Eine IP-Adresse (Internet Protocol-Adresse) ist eine numerische Kennung, die einem Ger\u00e4t zugewiesen wird, das mit einem Netzwerk verbunden ist. Sie erm\u00f6glicht die Identifizierung und das Routing von Datenpaketen zwischen verschiedenen Ger\u00e4ten in einem Netzwerk. Es gibt verschiedene Versionen von IP-Adressen, aber die gebr\u00e4uchlichste ist die IPv4, die aus vier Zahlenbl\u00f6cken besteht, die durch Punkte getrennt sind (z. B. 192.168.0.1). Mit der Einf\u00fchrung von IPv6 k\u00f6nnen noch mehr IP-Adressen generiert werden, um dem wachsenden Bedarf gerecht zu werden.</p>"},{"location":"Begriffe/Netzwerk/Protokolle/#httphttps","title":"HTTP/HTTPS","text":"<p>Der Typ (HTTP, HTTPS) bezieht sich auf das Protokoll, das f\u00fcr die Kommunikation zwischen einem Webbrowser und einem Webserver verwendet wird. HTTP steht f\u00fcr Hypertext Transfer Protocol und war das urspr\u00fcngliche Protokoll f\u00fcr den Datenaustausch im Web. Es erm\u00f6glicht die \u00dcbertragung von HTML-Seiten, Bildern, Videos und anderen Dateien \u00fcber das Internet. HTTPS steht f\u00fcr Hypertext Transfer Protocol Secure und ist eine verschl\u00fcsselte Version von HTTP. HTTPS verwendet eine zus\u00e4tzliche Sicherheitsschicht (SSL/TLS), um die Kommunikation zwischen dem Webbrowser und dem Webserver abzusichern. Es wird h\u00e4ufig f\u00fcr Websites verwendet, die sensible Informationen wie Passw\u00f6rter, Kreditkartendaten oder pers\u00f6nliche Daten \u00fcbertragen.</p>"},{"location":"Begriffe/Netzwerk/Protokolle/#eli5_1","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest einen Brief an jemanden schreiben und ihm etwas mitteilen. Aber anstatt den Brief pers\u00f6nlich zu \u00fcbergeben, m\u00f6chtest du ihn \u00fcber das Internet verschicken. Hier kommt HTTP ins Spiel.</p> <p>HTTP steht f\u00fcr \"Hypertext Transfer Protocol\". Das klingt nach einem komplizierten Namen, aber es ist im Grunde genommen eine Methode, um Informationen zwischen deinem Webbrowser (wie Chrome oder Firefox) und einer Website auszutauschen.</p> <p>Wenn du eine Website in deinen Webbrowser eingibst und auf \"Enter\" dr\u00fcckst, sendet dein Browser eine Nachricht an die Website. Diese Nachricht enth\u00e4lt Anfragen wie \"Zeige mir die Homepage\" oder \"Gib mir die neuesten Nachrichten\".</p> <p>Die Website erh\u00e4lt diese Anfrage und antwortet mit einer Nachricht, die die gew\u00fcnschten Informationen enth\u00e4lt. Es ist, als ob du einen Brief an jemanden schreibst und darauf wartest, dass er dir antwortet.</p> <p>HTTP ist also wie die Sprache, in der dein Webbrowser und die Website miteinander kommunizieren. Es erm\u00f6glicht deinem Browser, Anfragen zu stellen und Informationen von der Website abzurufen.</p> <p>HTTP ist auch der Grund, warum du Links auf Webseiten anklicken kannst. Wenn du auf einen Link klickst, sendet dein Browser eine neue Anfrage an eine andere Seite und erh\u00e4lt die entsprechenden Informationen zur\u00fcck, um sie in deinem Browser anzuzeigen.</p> <p>Insgesamt sorgt HTTP daf\u00fcr, dass du im Internet surfen, Websites besuchen und Informationen abrufen kannst, indem es die Kommunikation zwischen deinem Webbrowser und den Websites regelt. Es ist wie die Sprache, in der dein Computer mit dem Rest des Internets spricht.</p>"},{"location":"Begriffe/Netzwerk/Security/","title":"Security","text":""},{"location":"Begriffe/Netzwerk/Security/#firewall","title":"Firewall","text":"<p>Firewalls sind Sicherheitsvorrichtungen, die den Datenverkehr zwischen Netzwerken \u00fcberwachen und kontrollieren. Sie setzen Regeln und Richtlinien, um unerw\u00fcnschte oder sch\u00e4dliche Daten zu blockieren und das Netzwerk vor Bedrohungen zu sch\u00fctzen. Dadurch werden Angriffe, Viren und unautorisierte Zugriffe verhindert, w\u00e4hrend die Sicherheit und Integrit\u00e4t des Netzwerks gew\u00e4hrleistet werden.</p>"},{"location":"Begriffe/Netzwerk/Security/#eli5","title":"ELI5","text":"<p>Stell dir vor, du hast ein magisches Tor, das entscheidet, wer in dein Zimmer kommen darf und wer nicht. Die Firewall ist wie dieses magische Tor f\u00fcr deinen Computer.</p> <p>Die Firewall schaut sich alle Informationen an, die in deinen Computer kommen oder aus ihm herausgehen wollen. Sie \u00fcberpr\u00fcft, ob diese Informationen sicher und erlaubt sind oder ob sie sch\u00e4dlich sind und drau\u00dfen bleiben sollten.</p> <p>Die Firewall hat Regeln, die ihr sagen, was erlaubt ist und was nicht. Zum Beispiel kann sie sagen: \"E-Mails d\u00fcrfen hereinkommen, aber nur von vertrauensw\u00fcrdigen Absendern.\" Oder sie kann sagen: \"B\u00f6sartige Websites d\u00fcrfen nicht in deinen Computer gelangen.\"</p> <p>Die Firewall hilft also dabei, deinen Computer vor Gefahren zu sch\u00fctzen, indem sie unerw\u00fcnschte oder gef\u00e4hrliche Dinge blockiert. Sie ist wie ein W\u00e4chter, der sicherstellt, dass nur die guten und sicheren Dinge in deinen Computer gelangen d\u00fcrfen.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/","title":"Unsortiert","text":"<p>Beschtes Video von \"Die Sendung mit der Maus\" https://youtu.be/fpqhjEtznVk?t=76</p> <p>Man kann die einzelnen Begriffe definitiv besser strukturieren. Vorerst werden hier die jeweiligen Begriffe gesammelt die noch nicht zu einer eigenen Unterkategorie geh\u00f6ren.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#ports","title":"Ports","text":"<p>Ports sind nummerierte Kan\u00e4le auf einem Ger\u00e4t, die bestimmten Anwendungen oder Diensten zugeordnet werden. Ports erm\u00f6glichen die gleichzeitige Kommunikation mehrerer Anwendungen \u00fcber das Netzwerk. Sie werden oft mit der IP-Adresse kombiniert, um eine bestimmte Anwendung auf einem bestimmten Ger\u00e4t zu identifizieren. Ein Port wird durch eine 16-Bit-Zahl dargestellt und kann Werte von 0 bis 65535 haben. Es gibt bestimmte Standardports, die f\u00fcr bestimmte Dienste reserviert sind, wie z. B. Port 80 f\u00fcr HTTP (Hypertext Transfer Protocol) oder Port 443 f\u00fcr HTTPS (Hypertext Transfer Protocol Secure).</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#eli5","title":"ELI5","text":"<p>Stell dir vor, du m\u00f6chtest eine wichtige Nachricht an einen Freund schicken. Du wei\u00dft, dass dein Freund in einem gro\u00dfen Geb\u00e4ude wohnt, das viele verschiedene R\u00e4ume hat. Aber wie findest du heraus, in welchem Raum sich dein Freund befindet?</p> <p>Hier kommen Ports ins Spiel. Stell dir vor, das Geb\u00e4ude hat viele T\u00fcren, und jede T\u00fcr hat eine Nummer. Jeder Raum in dem Geb\u00e4ude hat eine bestimmte Funktion oder Aufgabe. Ein Port ist wie eine T\u00fcr mit einer Nummer, die zu einem bestimmten Raum f\u00fchrt.</p> <p>Wenn du eine Nachricht an deinen Freund senden m\u00f6chtest, musst du wissen, welchen Raum er sich gerade aufh\u00e4lt. Indem du die richtige T\u00fcr mit der passenden Nummer benutzt, kannst du sicherstellen, dass deine Nachricht den richtigen Raum erreicht.</p> <p>Im Computerbereich funktioniert es \u00e4hnlich. Ein Port ist eine Nummer, die einem bestimmten Dienst oder einer bestimmten Anwendung auf einem Computer zugeordnet ist. Wenn Daten von einem Ger\u00e4t zu einem anderen \u00fcber das Netzwerk gesendet werden, m\u00fcssen sie wissen, welchen Port sie erreichen m\u00fcssen, um zur richtigen Anwendung oder zum richtigen Dienst zu gelangen.</p> <p>Es gibt Tausende von Ports, die f\u00fcr verschiedene Zwecke reserviert sind. Einige Ports sind Standardports, die f\u00fcr bestimmte Dienste reserviert sind. Zum Beispiel ist Port 80 der Standardport f\u00fcr unverschl\u00fcsselte Webseiten (HTTP), w\u00e4hrend Port 443 f\u00fcr verschl\u00fcsselte Webseiten (HTTPS) verwendet wird. Port 22 wird oft f\u00fcr sichere Fernzugriffsverbindungen (SSH) verwendet.</p> <p>Ports sind also wie die Nummern an den T\u00fcren in einem gro\u00dfen Geb\u00e4ude. Sie helfen dabei, Datenpakete an die richtigen Anwendungen oder Dienste auf Computern zu senden, wenn sie \u00fcber das Netzwerk kommunizieren.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#dns","title":"DNS","text":"<p>DNS steht f\u00fcr Domain Name System. Es ist wie ein Telefonbuch des Internets, das hilft, die Namen von Websites in die zugeh\u00f6rigen IP-Adressen zu \u00fcbersetzen.</p> <p>Stell dir vor, du m\u00f6chtest eine Website wie \"www.beispiel.com\" besuchen. Aber Computer kommunizieren \u00fcber IP-Adressen, wie z. B. 192.168.0.1. Hier kommt DNS ins Spiel.</p> <p>Das DNS-System besteht aus Servern und Protokollen, die die Namensaufl\u00f6sung erm\u00f6glichen. Wenn du den Namen einer Website eingibst, sendet dein Computer eine Anfrage an den DNS-Server. Der DNS-Server \u00fcbersetzt dann den Namen in die entsprechende IP-Adresse und gibt sie an deinen Computer zur\u00fcck.</p> <p>DNS ist wichtig, weil es den Menschen erm\u00f6glicht, sich leicht an Namen wie \"beispiel.com\" zu erinnern, anstatt sich IP-Adressen merken zu m\u00fcssen. Es vereinfacht die Kommunikation im Internet und erm\u00f6glicht es uns, Websites \u00fcber ihre Namen zu erreichen.</p> <p>Zusammenfassend gesagt ist DNS ein System, das die Namen von Websites in die zugeh\u00f6rigen IP-Adressen \u00fcbersetzt. Es macht es einfacher, Websites \u00fcber Namen statt \u00fcber IP-Adressen zu erreichen und spielt eine wichtige Rolle bei der Kommunikation im Internet.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#api","title":"API","text":"<p>API steht f\u00fcr \"Application Programming Interface\". Es handelt sich dabei um eine Sammlung von Regeln und Protokollen, die festlegen, wie verschiedene Softwareanwendungen oder -komponenten miteinander interagieren und kommunizieren sollen. Sie k\u00f6nnen sich eine API als eine Art Speisekarte in einem Restaurant vorstellen. Die Speisekarte bietet eine Liste von Gerichten, die Sie bestellen k\u00f6nnen, zusammen mit einer Beschreibung dessen, was jedes Gericht beinhaltet. In \u00e4hnlicher Weise definiert eine API eine Liste von Funktionen oder Diensten, die von einer Softwareanwendung bereitgestellt werden, zusammen mit Anweisungen dar\u00fcber, wie diese Funktionen oder Dienste verwendet werden k\u00f6nnen.</p> <p>Es gibt verschiedene Arten von APIs, aber hier sind ein paar Beispiele, um Ihnen eine Vorstellung zu geben:</p> <ul> <li>Web-APIs<ul> <li>oft auch als HTTP-APIs oder REST-APIs bezeichnet, erm\u00f6glichen die Kommunikation zwischen verschiedenen Softwareanwendungen \u00fcber das Internet. Zum Beispiel k\u00f6nnte eine Wetter-App eine Web-API verwenden, um Wetterdaten von einem Server abzurufen.</li> </ul> </li> <li>Betriebssystem-APIs<ul> <li>definieren, wie Anwendungen mit einem Betriebssystem interagieren k\u00f6nnen. Zum Beispiel k\u00f6nnte eine Anwendung eine Betriebssystem-API verwenden, um ein Fenster auf dem Bildschirm zu \u00f6ffnen oder um Zugriff auf Dateien auf der Festplatte zu erhalten.</li> </ul> </li> <li>Bibliothekoder Framework-APIs<ul> <li>definieren, wie Anwendungen mit einer bestimmten Softwarebibliothek oder einem Framework interagieren k\u00f6nnen. Zum Beispiel k\u00f6nnte eine Anwendung eine Bibliotheks-API verwenden, um komplexe mathematische Berechnungen durchzuf\u00fchren oder um eine Datenbank abzufragen.</li> </ul> </li> </ul> <p>APIs sind ein grundlegender Baustein der modernen Softwareentwicklung und erm\u00f6glichen es Entwicklern, komplexe Anwendungen zu erstellen, die auf den Funktionen und Diensten aufbauen, die von anderen zur Verf\u00fcgung gestellt werden.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#api_call","title":"API Call","text":"<p>Ein API-Call ist eine Anfrage, die an eine API (Application Programming Interface) gesendet wird, um eine bestimmte Funktion auszuf\u00fchren. APIs sind im Grunde genommen eine Art von Vertrag zwischen verschiedenen Softwareanwendungen, die festlegt, wie sie miteinander kommunizieren und Daten austauschen k\u00f6nnen.</p> <p>Ein API-Call besteht normalerweise aus mehreren Teilen:</p> <ul> <li>Die Basis-URL:<ul> <li>Dies ist die grundlegende Webadresse, an die der Call gesendet wird.</li> </ul> </li> <li>Der Endpunkt:<ul> <li>Dies ist der spezifische Pfad an der Basis-URL, der auf eine bestimmte Ressource oder eine Sammlung von Ressourcen verweist.</li> </ul> </li> <li>Die Methode:<ul> <li>Dies gibt an, welche Art von Aktion ausgef\u00fchrt werden soll. In einer RESTful API, einer der gebr\u00e4uchlichsten Arten von APIs, gibt es meist vier Methoden: GET (Daten abrufen), POST (neue Daten erstellen), PUT oder PATCH (bestehende Daten aktualisieren) und DELETE (Daten l\u00f6schen).</li> </ul> </li> <li>Die Parameter oder der Body:<ul> <li>Dies sind zus\u00e4tzliche Informationen, die mit dem API-Call gesendet werden k\u00f6nnen. Bei einem GET-Request k\u00f6nnten dies zum Beispiel Suchparameter sein, die angeben, welche Daten genau abgerufen werden sollen. Bei einem POST-, PUToder PATCH-Request k\u00f6nnte es sich um die tats\u00e4chlichen Daten handeln, die erstellt oder aktualisiert werden sollen.</li> </ul> </li> </ul> <p>So k\u00f6nnte beispielsweise ein API-Call an eine Wetter-API aussehen: <code>GET https://api.weather.com/v3/wx/forecast/daily/5day?apiKey=YOUR_API_KEY&amp;geocode=37.7,-122.4</code>. Dieser Call verwendet die GET-Methode, um die 5-Tage-Wettervorhersage f\u00fcr die geographischen Koordinaten 37.7,-122.4 (San Francisco) von der <code>api.weather.com</code> API abzurufen.</p>"},{"location":"Begriffe/Netzwerk/Unsortiert/#cloudfront","title":"Cloudfront","text":"<p>Amazon CloudFront ist ein Content-Delivery-Network (CDN) Service, der von Amazon Web Services (AWS) angeboten wird. Ein CDN ist ein Netzwerk verteilter Server, die Inhalte zu Nutzern basierend auf deren geografischer Lage ausliefern.</p> <p>Die Hauptfunktion von CloudFront ist es, Daten, Videos, Anwendungen und APIs sicher und mit hoher Geschwindigkeit und geringer Latenz an Nutzer weltweit zu liefern. CloudFront ist tief in das AWS-Netzwerk integriert, was es zu einem geeigneten CDN f\u00fcr die Lieferung von Inhalten macht, die in anderen AWS-Diensten gehostet werden, wie z.B. in Amazon S3 (Simple Storage Service), Amazon EC2 (Elastic Compute Cloud) oder AWS Elastic Load Balancing.</p> <p>Einige der Hauptfunktionen von CloudFront umfassen:</p> <ul> <li> <p>Edge Locations: CloudFront verwendet ein Netzwerk von \"Edge Locations\" auf der ganzen Welt, um Inhalte n\u00e4her an die Nutzer zu bringen, was die Latenz reduziert. Wenn ein Nutzer eine Anfrage an einen Inhalt stellt, wird die Anfrage an die n\u00e4chstgelegene Edge Location weitergeleitet, um eine schnelle Lieferung zu gew\u00e4hrleisten.</p> </li> <li> <p>Caching: CloudFront speichert Kopien von Inhalten (d.h. es erstellt ein Cache) an diesen Edge Locations, so dass wiederholte Anfragen nach dem gleichen Inhalt schneller bedient werden k\u00f6nnen, ohne dass die Anfrage jedes Mal bis zum Ursprungsserver zur\u00fcckgehen muss.</p> </li> <li> <p>Sicherheit: CloudFront bietet Sicherheitsfunktionen wie SSL/TLS f\u00fcr sichere Netzwerkverbindungen, AWS Shield f\u00fcr DDoS-Schutz und AWS WAF (Web Application Firewall) f\u00fcr den Schutz vor webbasierten Bedrohungen. Dar\u00fcber hinaus unterst\u00fctzt es auch die Anforderungen des Identity and Access Management (IAM) von AWS.</p> </li> <li> <p>Integration: Wie bereits erw\u00e4hnt, ist CloudFront tief in das AWS-\u00d6kosystem integriert, was bedeutet, dass es einfach ist, es mit anderen AWS-Diensten zu verwenden, und es ist auch einfach, mit CloudFront \u00fcber die AWS-Managementkonsole, CLI (Command Line Interface) und SDKs (Software Development Kits) zu interagieren.</p> </li> </ul> <p>Das sind nur einige der Funktionen von Amazon CloudFront. Es bietet auch Unterst\u00fctzung f\u00fcr benutzerdefinierte SSL-Zertifikate, das Streaming von Live- und On-Demand-Videos, und es ist kompatibel mit mehreren Protokollen, einschlie\u00dflich HTTP, HTTPS, RTMP und mehr.</p>"},{"location":"Begriffe/Sprachen/Config/","title":"Sprachen","text":""},{"location":"Begriffe/Sprachen/Config/#sprachen","title":"Sprachen","text":""},{"location":"Begriffe/Sprachen/Config/#yaml","title":"YAML","text":"<p>YAML (YAML Ain't Markup Language) ist eine einfache, menschenlesbare Datenstruktursprache. Es wird oft als Dateiformat f\u00fcr die Konfiguration von Anwendungen und die \u00dcbertragung von Daten verwendet. YAML-Dateien verwenden eine textbasierte Syntax, die darauf abzielt, einfach zu sein und leicht verstanden zu werden. YAML kann verwendet werden, um komplexe Datenstrukturen wie Listen, Objekte und verschachtelte Hierarchien darzustellen. Es ist besonders n\u00fctzlich f\u00fcr Konfigurationsdateien in Anwendungen oder f\u00fcr den Austausch von Daten zwischen verschiedenen Systemen.</p>"},{"location":"Begriffe/Sprachen/Config/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr YAML, das eine Konfigurationsdatei f\u00fcr eine Anwendung darstellt:</p> <pre><code># Konfigurationsdatei f\u00fcr eine Anwendung\napp:\nname: Mein Beispiel-App\nversion: 1.0.0\nenvironment: production\ndatabase:\nhost: localhost\nport: 5432\nusername: myuser\npassword: mypassword\ndbname: mydatabase\nserver:\nhost: 0.0.0.0\nport: 8080\n</code></pre> <p>In diesem Beispiel gibt es drei Hauptbereiche: <code>app</code>, <code>database</code> und <code>server</code>. Unter jedem Bereich sind Schl\u00fcssel-Wert-Paare aufgef\u00fchrt, die verschiedene Einstellungen f\u00fcr die entsprechenden Komponenten darstellen.</p> <p>Die <code>app</code>-Sektion enth\u00e4lt Informationen \u00fcber den Namen, die Version und die Umgebung der Anwendung.</p> <p>Die <code>database</code>-Sektion enth\u00e4lt Konfigurationsdetails f\u00fcr die Datenbankverbindung, wie den Host, den Port, den Benutzernamen, das Passwort und den Datenbanknamen.</p> <p>Die <code>server</code>-Sektion enth\u00e4lt Konfigurationseinstellungen f\u00fcr den Webserver, wie den Host und den Port, auf dem die Anwendung ausgef\u00fchrt werden soll.</p> <p>Diese YAML-Konfigurationsdatei kann von der Anwendung eingelesen werden, um die entsprechenden Einstellungen zu laden und die Anwendung entsprechend zu konfigurieren. YAML bietet eine einfache und lesbare Syntax, um Datenstrukturen zu definieren und zu organisieren.</p>"},{"location":"Begriffe/Sprachen/Config/#json","title":"JSON","text":"<p>JSON steht f\u00fcr JavaScript Object Notation. Es handelt sich dabei um ein leichtgewichtiges Datenformat, das f\u00fcr den Datenaustausch zwischen Server und Client im Internet weit verbreitet ist. JSON-Daten werden als Sammlungen von Schl\u00fcssel-Wert-Paaren dargestellt, \u00e4hnlich wie Objekte in JavaScript. Ein Vorteil von JSON ist, dass es von Menschen leicht lesbar ist und von vielen Programmiersprachen leicht verarbeitet werden kann.</p>"},{"location":"Begriffe/Sprachen/Config/#beispiel_1","title":"Beispiel","text":"<p>Ein einfaches Beispiel f\u00fcr JSON k\u00f6nnte so aussehen:</p> <pre><code>{\n\"Name\": \"Max Mustermann\",\n\"Alter\": 35,\n\"Beruf\": \"Softwareentwickler\"\n}\n</code></pre> <p>In diesem Beispiel sind \"Name\", \"Alter\" und \"Beruf\" die Schl\u00fcssel und \"Max Mustermann\", 35 und \"Softwareentwickler\" sind die zugeh\u00f6rigen Werte.</p>"},{"location":"Begriffe/Sprachen/Config/#konzepte","title":"Konzepte","text":""},{"location":"Begriffe/Sprachen/Config/#key-value","title":"Key-Value","text":"<p>Ein Key-Value-Pair ist eine grundlegende Datenrepr\u00e4sentation, die in vielen Kontexten verwendet wird. In einem Key-Value-Pair ist der Schl\u00fcssel ein eindeutiger Bezeichner, der auf einen Wert verweist. Diese Struktur ist besonders n\u00fctzlich in Situationen, in denen Sie schnell auf einen Wert zugreifen m\u00f6chten, indem Sie einfach den Schl\u00fcssel kennen. Sie wird in vielen Datenstrukturen und Datenformaten, einschlie\u00dflich JSON, und in Key-Value-Datenbanken verwendet.</p>"},{"location":"Begriffe/Sprachen/Config/#tags","title":"Tags","text":"<p>\"Tags\" oder \"Etiketten\" werden in vielen Kontexten in der Informationstechnologie verwendet und dienen im Allgemeinen dazu, Informationen zu organisieren und zu kategorisieren.</p> <p>Hier sind ein paar Beispiele, wie Tags verwendet werden:</p> <ul> <li>In Webtechnologien sind HTML-Tags ein grundlegendes Element der Webseitenstruktur. Sie werden verwendet, um verschiedene Teile des Inhalts zu kennzeichnen und zu strukturieren, wie z.B. \u00dcberschriften, Abs\u00e4tze, Links, Bilder usw.</li> <li>In der Softwareentwicklung k\u00f6nnen Tags in Versionskontrollsystemen wie Git verwendet werden, um spezifische Punkte in der Historie des Codes zu markieren, wie z.B. eine ver\u00f6ffentlichte Version eines Programms.</li> <li>In der Cloud-Computing werden Tags h\u00e4ufig verwendet, um Ressourcen (wie Server, Datenbanken, Netzwerke usw.) zu kategorisieren. So kann beispielsweise ein Tag verwendet werden, um anzugeben, wer der Besitzer einer Ressource ist, zu welchem Projekt sie geh\u00f6rt, oder ob sie in einer Testoder Produktionsumgebung l\u00e4uft.</li> <li>In Datenbanken k\u00f6nnen Tags verwendet werden, um Datens\u00e4tze zu kategorisieren oder um Metadaten hinzuzuf\u00fcgen.</li> </ul> <p>In all diesen Kontexten helfen Tags dabei, Ordnung und Struktur in gro\u00dfe Mengen von Informationen zu bringen und erm\u00f6glichen es Benutzern, schnell und effizient auf bestimmte Informationen zuzugreifen.</p>"},{"location":"Begriffe/Sprachen/Config/#elemente","title":"Elemente","text":""},{"location":"Begriffe/Sprachen/Config/#umgebungsvariablen","title":"Umgebungsvariablen","text":"<p>Umgebungsvariablen sind ein Schl\u00fcsselelement von Betriebssystemen und dienen dazu, bestimmte Werte oder Informationen, die von Prozessen oder Programmen verwendet werden, dynamisch zur Verf\u00fcgung zu stellen. Sie k\u00f6nnen von den meisten Betriebssystemen, darunter Linux, Unix, Windows und MacOS, verwendet werden.</p> <p>Eine Umgebungsvariable hat einen Namen und einen zugeh\u00f6rigen Wert. Diese Werte k\u00f6nnen von einfachen Zeichenketten oder Zahlen bis hin zu Pfaden von Verzeichnissen oder Dateien variieren. Beispielsweise kann die Umgebungsvariable \"PATH\" auf Unix-basierten Systemen dazu verwendet werden, die Verzeichnisse zu spezifizieren, in denen das Betriebssystem nach ausf\u00fchrbaren Dateien suchen soll.</p> <p>Umgebungsvariablen k\u00f6nnen auch zur Konfiguration von Softwareanwendungen verwendet werden. Zum Beispiel kann eine Anwendung eine Umgebungsvariable verwenden, um die Adresse eines Servers zu speichern, mit dem sie kommuniziert, oder um festzulegen, in welchem Modus sie ausgef\u00fchrt wird (z.B. Entwicklungs-, Testoder Produktionsmodus).</p> <p>Umgebungsvariablen k\u00f6nnen \u00fcber die Kommandozeile oder \u00fcber das Betriebssystem selbst eingestellt und abgerufen werden. In Unix-basierten Systemen, wie Linux oder MacOS, verwendet man h\u00e4ufig die Befehle \"export\" zum Setzen und \"echo\" zum Abrufen von Umgebungsvariablen. In Windows verwendet man \"set\" zum Setzen und Abrufen von Umgebungsvariablen.</p> <p>Ein weiterer Vorteil der Verwendung von Umgebungsvariablen ist, dass sie dazu beitragen, die Sicherheit zu erh\u00f6hen, indem sie beispielsweise sensible Informationen wie Passw\u00f6rter oder API-Schl\u00fcssel speichern. Auf diese Weise m\u00fcssen diese Werte nicht direkt in den Anwendungscode geschrieben werden.</p>"},{"location":"Begriffe/Sprachen/Config/#beispiel_2","title":"Beispiel","text":"<p>Nehmen wir an, Sie entwickeln eine Anwendung, die mit einer Datenbank kommuniziert. Sie k\u00f6nnten Umgebungsvariablen verwenden, um die Verbindungsinformationen f\u00fcr die Datenbank zu speichern. Das k\u00f6nnte so aussehen:</p> <ul> <li><code>DB_HOST</code> k\u00f6nnte den Hostnamen oder die IP-Adresse des Datenbankservers speichern, z. B. <code>DB_HOST=192.168.1.1</code> oder <code>DB_HOST=dbserver.meinefirma.com</code>.</li> <li><code>DB_USER</code> k\u00f6nnte den Benutzernamen f\u00fcr die Datenbankverbindung speichern, z. B. <code>DB_USER=meinbenutzer</code>.</li> <li><code>DB_PASS</code> k\u00f6nnte das Passwort f\u00fcr die Datenbankverbindung speichern, z. B. <code>DB_PASS=meinpasswort</code>.</li> </ul> <p>In Ihrem Anwendungscode k\u00f6nnten Sie dann auf diese Variablen zugreifen, um eine Verbindung zur Datenbank herzustellen, anstatt die tats\u00e4chlichen Werte direkt in Ihren Code zu schreiben. In vielen Programmiersprachen k\u00f6nnen Sie auf Umgebungsvariablen mit einer speziellen Funktion oder Methode zugreifen. Zum Beispiel in Python k\u00f6nnten Sie die <code>os.environ</code> Funktion verwenden:</p> <pre><code>import os\ndb_host = os.environ['DB_HOST']\ndb_user = os.environ['DB_USER']\ndb_pass = os.environ['DB_PASS']\n</code></pre> <p>Durch die Verwendung von Umgebungsvariablen k\u00f6nnen Sie die Datenbankverbindungsinformationen leicht \u00e4ndern, ohne Ihren Anwendungscode zu \u00e4ndern. Au\u00dferdem verhindert es, dass sensible Informationen wie Datenbankpassw\u00f6rter in Ihrem Code erscheinen.</p>"},{"location":"Begriffe/Sprachen/Doku/","title":"Dokusprachen","text":""},{"location":"Begriffe/Sprachen/Doku/#dokusprachen","title":"Dokusprachen","text":""},{"location":"Begriffe/Sprachen/Doku/#markdown","title":"Markdown","text":"<p>Markdown ist eine einfache Auszeichnungssprache, die verwendet wird, um formatierten Text zu schreiben. Es ist entworfen worden, um schnell und einfach lesbare und schreibbare Texte zu erstellen, die in HTML oder anderen Formaten wie PDF oder DOCX umgewandelt werden k\u00f6nnen. Markdown erm\u00f6glicht es, Texte mit einfachen Syntaxelementen wie \u00dcberschriften, Listen, Fettdruck, Kursivdruck, Links und Bildern zu formatieren, ohne auf komplexe HTML-Tags zur\u00fcckgreifen zu m\u00fcssen. Es ist weit verbreitet f\u00fcr die Erstellung von Dokumentationen, Readme-Dateien, Forenbeitr\u00e4gen und Blogs, da es eine einfachere und effizientere M\u00f6glichkeit bietet, formatierten Text zu schreiben.</p> <p>\u2139 Info: Dieser Text und alles was hier steht ist in Markdown geschrieben</p>"},{"location":"Begriffe/Sprachen/Doku/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr Markdown, um einen formatierten Text zu erstellen:</p> <pre><code># Mein Beispiel-Text\nDies ist ein **fettgedruckter** Text.\n\nHier ist eine Liste:\n- Erster Punkt\n- Zweiter Punkt\n- Dritter Punkt\n\nEin Link zu [OpenAI](https://openai.com).\n\n&gt; Ein Zitat oder eine hervorgehobene Textpassage.\n</code></pre>"},{"location":"Begriffe/Sprachen/Doku/#mein_beispiel-text","title":"Mein Beispiel-Text","text":"<p>Dies ist ein fettgedruckter Text.</p> <p>Hier ist eine Liste: - Erster Punkt - Zweiter Punkt - Dritter Punkt</p> <p>Ein Link zu OpenAI.</p> <p>Ein Zitat oder eine hervorgehobene Textpassage.</p>"},{"location":"Begriffe/Sprachen/IaC/","title":"IaC","text":""},{"location":"Begriffe/Sprachen/IaC/#iac","title":"IaC","text":""},{"location":"Begriffe/Sprachen/IaC/#iac_1","title":"IaC","text":"<p>IaC steht f\u00fcr Infrastructure-as-Code und bezieht sich auf den Ansatz, die Infrastruktur eines Systems mithilfe von Code zu definieren und zu verwalten. Anstatt die Infrastruktur manuell zu konfigurieren, k\u00f6nnen Entwickler mit IaC-Tools wie Terraform eine deklarative Konfigurationssprache verwenden, um Ressourcen wie Server, Netzwerkkomponenten und Cloud-Services zu beschreiben. Diese Beschreibungen werden dann verwendet, um die Infrastruktur automatisch bereitzustellen, zu ver\u00e4ndern und zu l\u00f6schen.</p>"},{"location":"Begriffe/Sprachen/IaC/#terraform","title":"Terraform","text":"<p>Terraform ist ein sogenanntes Infrastructure-as-Code (IaC)-Werkzeug. Es erm\u00f6glicht Entwicklern und Systemadministratoren, die Infrastruktur f\u00fcr ihre Anwendungen und Systeme \u00fcber eine Codebasis zu verwalten.</p> <p>Terraform erm\u00f6glicht es Entwicklern, Infrastrukturressourcen \u00fcber verschiedene Cloud-Anbieter hinweg zu verwalten, darunter auch gro\u00dfe Cloud-Plattformen wie Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP) und viele andere. Es bietet eine einheitliche Schnittstelle und Abstraktionsschicht, um Infrastrukturkonfigurationen plattform\u00fcbergreifend und wiederverwendbar zu machen.</p> <p>Mit Terraform k\u00f6nnen Entwickler ihre Infrastruktur in Form von Code versionieren, sodass \u00c4nderungen und Updates verfolgt und verwaltet werden k\u00f6nnen. Dadurch wird die Infrastrukturverwaltung konsistent, skalierbar und reproduzierbar. Terraform erm\u00f6glicht auch die automatische Skalierung und das dynamische Hinzuf\u00fcgen oder Entfernen von Ressourcen basierend auf Anforderungen oder Last.</p> <p>Zusammenfassend ist Terraform ein IaC-Tool, das es Entwicklern erm\u00f6glicht, die Infrastruktur ihrer Anwendungen und Systeme \u00fcber Code zu verwalten. Es bietet eine plattform\u00fcbergreifende Schnittstelle zur Bereitstellung, Ver\u00e4nderung und L\u00f6schung von Infrastrukturressourcen in verschiedenen Cloud-Umgebungen. Dies erleichtert die Automatisierung, Skalierung und Wiederholbarkeit der Infrastrukturverwaltung.</p>"},{"location":"Begriffe/Sprachen/IaC/#eli5","title":"ELI5","text":"<p>Stell dir vor, du baust ein Lego-Set zusammen. Du hast viele verschiedene Lego-Steine und m\u00f6chtest sie zu einem bestimmten Modell zusammensetzen. Aber statt jedes Mal von vorne anzufangen, wenn du das Modell \u00e4ndern m\u00f6chtest, verwendest du eine Anleitung, die dir sagt, welche Steine du wo platzieren sollst.</p> <p>Terraform ist wie diese Anleitung, aber f\u00fcr die Erstellung von Computer-Infrastruktur. Anstatt die Infrastruktur manuell Schritt f\u00fcr Schritt aufzubauen, kannst du Terraform verwenden, um eine Anleitung zu erstellen, wie deine Infrastruktur aussehen soll.</p> <p>Du beschreibst deine gew\u00fcnschte Infrastruktur in einer speziellen Sprache, \u00e4hnlich wie eine Liste der ben\u00f6tigten Lego-Steine und wie sie zusammengebaut werden sollen. Terraform verwendet dann diese Anleitung, um die Infrastruktur automatisch zu erstellen, zu \u00e4ndern oder sogar zu l\u00f6schen.</p> <p>Terraform unterst\u00fctzt verschiedene Cloud-Plattformen wie Amazon Web Services (AWS), Microsoft Azure oder Google Cloud Platform (GCP). Es kennt die richtigen Schritte und die Reihenfolge, um die entsprechenden Ressourcen in der Cloud zu erstellen, wie Server, Netzwerke oder Datenbanken.</p> <p>Wenn du \u00c4nderungen an deiner Infrastruktur vornehmen m\u00f6chtest, \u00e4nderst du einfach die Anleitung in Terraform. Es \u00fcberpr\u00fcft dann, welche Teile aktualisiert werden m\u00fcssen und passt die Infrastruktur entsprechend an. So kannst du deine Infrastruktur einfach verwalten, ohne alles von Grund auf neu zu erstellen.</p> <p>Zusammengefasst ist Terraform wie eine Anleitung, die dir sagt, wie du deine Computer-Infrastruktur aufbauen kannst. Du beschreibst, was du brauchst, und Terraform sorgt daf\u00fcr, dass die Infrastruktur automatisch erstellt wird. Es hilft dir, Zeit zu sparen und deine Infrastruktur effizient zu verwalten, \u00e4hnlich wie beim Zusammenbauen eines Lego-Sets mit einer Anleitung.</p>"},{"location":"Begriffe/Sprachen/IaC/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr Terraform, um eine AWS EC2-Instanz zu erstellen:</p> <pre><code># Provider konfigurieren (AWS)\nprovider \"aws\" {\nregion = \"us-west-2\"\n}\n# EC2-Instanz erstellen\nresource \"aws_instance\" \"example\" {\nami           = \"ami-0c94855ba95c71c99\"\ninstance_type = \"t2.micro\"\n}\n# Ausgabe der erstellten Instanz\noutput \"instance_ip\" {\nvalue = aws_instance.example.public_ip\n}\n</code></pre> <p>In diesem Beispiel wird eine AWS EC2-Instanz mit der angegebenen AMI (Amazon Machine Image) und Instanztyp erstellt. Das <code>provider</code>-Block definiert die AWS-Region, in der die Instanz erstellt werden soll.</p> <p>Die <code>resource</code>-Block definiert die AWS-Instanz mit dem Namen \"example\". Sie verwendet die angegebene AMI und den Instanztyp, um die Instanz zu konfigurieren.</p> <p>Der <code>output</code>-Block gibt die \u00f6ffentliche IP-Adresse der erstellten Instanz aus.</p>"},{"location":"Begriffe/Sprachen/IaC/#provider","title":"Provider","text":"<p>Ein Terraform Provider ist ein Plugin, das Terraform erm\u00f6glicht, mit einer spezifischen API oder einem spezifischen Service zu interagieren. Jeder Provider f\u00fcgt Terraform eine Reihe von Ressourcentypen hinzu, die es erstellen und verwalten kann.</p> <p>Zum Beispiel k\u00f6nnte ein AWS Provider es Ihnen erm\u00f6glichen, EC2-Instanzen, S3-Buckets, RDS-Datenbanken und andere AWS-Ressourcen zu erstellen und zu verwalten. Ein Google Cloud Platform Provider k\u00f6nnte es Ihnen erm\u00f6glichen, Compute-Instanzen, Cloud Storage-Buckets, SQL-Datenbanken und andere GCP-Ressourcen zu erstellen und zu verwalten.</p> <p>Es gibt Terraform Provider f\u00fcr eine Vielzahl von \u00f6ffentlichen Clouds, private Clouds, SaaS-Anwendungen und andere Dienste. In vielen F\u00e4llen werden diese Provider von den Unternehmen selbst oder von der Open-Source-Community gepflegt und aktualisiert.</p> <p>Mit diesen Providern kann Terraform als eine Art universelle \"Sprache\" f\u00fcr die Infrastrukturverwaltung dienen, die es Ihnen erm\u00f6glicht, Ressourcen in vielen verschiedenen Umgebungen mit einer einheitlichen, konsistenten Syntax zu verwalten.</p>"},{"location":"Begriffe/Sprachen/Pattern/","title":"Pattern","text":""},{"location":"Begriffe/Sprachen/Pattern/#regular_expressions","title":"Regular Expressions","text":"<p>Regul\u00e4re Ausdr\u00fccke, oft abgek\u00fcrzt als RegEx oder RegExp, sind eine sehr m\u00e4chtige Methode zur Mustererkennung in Text. Sie sind in vielen Programmiersprachen eingebaut und werden oft zur Textsuche, Textmanipulation und zum Parsen verwendet.</p> <p>Eine regul\u00e4re Ausdruck ist im Grunde eine Sequenz von Zeichen, die ein Muster bildet. Dieses Muster kann verwendet werden, um \u00dcbereinstimmungen in anderen Strings zu finden oder zu testen.</p>"},{"location":"Begriffe/Sprachen/Pattern/#komponenten","title":"Komponenten","text":"<p>Hier sind einige grundlegende Komponenten, die in regul\u00e4ren Ausdr\u00fccken verwendet werden:</p>"},{"location":"Begriffe/Sprachen/Pattern/#literal-zeichen","title":"Literal-Zeichen","text":"<p>Die einfachsten Muster bestehen aus Literal-Zeichen, wie z. B. <code>abc</code>, das eine \u00dcbereinstimmung mit dem genauen String <code>abc</code> findet.</p>"},{"location":"Begriffe/Sprachen/Pattern/#metazeichen","title":"Metazeichen","text":"<p>Diese haben eine spezielle Bedeutung, z. B. <code>.</code> (findet jedes einzelne Zeichen au\u00dfer einem Zeilenumbruch), <code>*</code> (findet null oder mehr Wiederholungen des vorhergehenden Zeichens), <code>+</code> (findet eine oder mehr Wiederholungen des vorhergehenden Zeichens) usw.</p>"},{"location":"Begriffe/Sprachen/Pattern/#charakterklassen","title":"Charakterklassen","text":"<p>Sie stellen einen Satz von Zeichen dar, von denen jedes ein Treffer sein kann. Zum Beispiel steht <code>[abc]</code> f\u00fcr ein Zeichen, das entweder <code>a</code>, <code>b</code> oder <code>c</code> ist.</p>"},{"location":"Begriffe/Sprachen/Pattern/#quantifizierer","title":"Quantifizierer","text":"<p>Diese bestimmen, wie oft ein Element wiederholt wird. Beispielsweise steht <code>{3}</code> f\u00fcr genau dreimal, <code>{3,}</code> f\u00fcr dreimal oder mehr, und <code>{3,5}</code> f\u00fcr zwischen drei und f\u00fcnf Mal.</p>"},{"location":"Begriffe/Sprachen/Pattern/#anker","title":"Anker","text":"<p>Diese werden verwendet, um den Anfang <code>^</code> oder das Ende <code>$</code> eines Strings oder einer Zeile zu bestimmen.</p>"},{"location":"Begriffe/Sprachen/Pattern/#gruppen_und_ruckverweise","title":"Gruppen Und R\u00fcckverweise","text":"<p>Zeichen k\u00f6nnen in Gruppen <code>()</code> eingefasst und sp\u00e4ter mit <code>\\1</code>, <code>\\2</code> usw. referenziert werden.</p>"},{"location":"Begriffe/Sprachen/Pattern/#escape-sequenzen","title":"Escape-Sequenzen","text":"<p>Einige Zeichen m\u00fcssen \"escaped\" werden, indem man ihnen ein <code>\\</code> voranstellt, um sie w\u00f6rtlich zu nehmen, z. B. <code>\\.</code>, um einen tats\u00e4chlichen Punkt zu finden, anstatt jedes Zeichen.</p>"},{"location":"Begriffe/Sprachen/Pattern/#beispiel","title":"Beispiel","text":"<p>Hier ist ein Anwendungsfall f\u00fcr regul\u00e4re Ausdr\u00fccke (RegEx).</p> <p>Angenommen, du hast eine Liste mit E-Mail-Adressen und du m\u00f6chtest pr\u00fcfen, ob sie ein g\u00fcltiges Format haben. Eine einfache (aber nicht vollst\u00e4ndig akkurate) RegEx zum \u00dcberpr\u00fcfen des E-Mail-Formats k\u00f6nnte so aussehen:</p> <pre><code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n</code></pre> <p>Lass uns diesen regul\u00e4ren Ausdruck St\u00fcck f\u00fcr St\u00fcck durchgehen:</p> <ul> <li><code>^</code> bezeichnet den Anfang der Zeile.</li> <li><code>[a-zA-Z0-9._%+-]+</code> steht f\u00fcr einen oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben), Ziffern, Punkte, Unterstriche, Prozentzeichen, Plus- oder Minuszeichen.</li> <li><code>@</code> ist das @-Zeichen selbst.</li> <li><code>[a-zA-Z0-9.-]+</code> steht wieder f\u00fcr einen oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben), Ziffern, Punkte oder Bindestriche.</li> <li><code>\\.</code> ist ein Punkt.</li> <li><code>[a-zA-Z]{2,}</code> steht f\u00fcr zwei oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben).</li> <li><code>$</code> bezeichnet das Ende der Zeile.</li> </ul> <p>Dieser regul\u00e4re Ausdruck w\u00fcrde also auf Zeichenketten wie \"example@example.com\" passen, aber nicht auf \"example@\", da dies kein g\u00fcltiges E-Mail-Format ist.</p> <p>Bitte beachte, dass diese RegEx nicht alle g\u00fcltigen E-Mail-Adressen korrekt erkennt und viele unzul\u00e4ssige als g\u00fcltig markieren k\u00f6nnte. E-Mail-Adressen folgen einer ziemlich komplexen Spezifikation und es ist ziemlich schwierig, sie mit einer einfachen RegEx vollst\u00e4ndig korrekt zu validieren.</p> <p>Aber dieses Beispiel zeigt gut, wie man regul\u00e4re Ausdr\u00fccke zum \u00dcberpr\u00fcfen von Textmustern verwenden kann.</p>"},{"location":"Begriffe/Sprachen/Pattern/#zu_beachten","title":"Zu Beachten","text":"<p>Es ist wichtig zu beachten, dass die genaue Syntax und die verf\u00fcgbaren Funktionen von regul\u00e4ren Ausdr\u00fccken je nach Programmiersprache oder Tool variieren k\u00f6nnen.</p> <p>Obwohl regul\u00e4re Ausdr\u00fccke sehr m\u00e4chtig sind, k\u00f6nnen sie auch sehr komplex und schwer zu lesen sein, insbesondere f\u00fcr komplizierte Muster. Daher ist es oft hilfreich, sie sorgf\u00e4ltig zu dokumentieren und zu testen.</p>"},{"location":"Begriffe/Sprachen/Pattern/#globbing","title":"Globbing","text":"<p>\"Globbing\" bezeichnet in der Informatik ein Verfahren zur \u00dcbereinstimmung mit bestimmten Zeichenmustern in Strings. Es wird oft in Unix-Shell-Umgebungen und in Programmiersprachen verwendet, die \u00e4hnliche F\u00e4higkeiten haben.</p> <p>Im Allgemeinen wird Globbing verwendet, um mehrere Dateinamen oder Ordner auf einmal zu spezifizieren, indem man spezielle Zeichen oder Wildcards verwendet. Hier sind die grundlegenden Wildcards und ihre Bedeutung im Kontext des Globbing:</p> <ul> <li> <p><code>*</code>: Dieser Platzhalter steht f\u00fcr eine beliebige Anzahl von beliebigen Zeichen. Zum Beispiel w\u00fcrde <code>*.txt</code> alle Dateien mit der Endung <code>.txt</code> im aktuellen Verzeichnis entsprechen.</p> </li> <li> <p><code>?</code>: Dieser Platzhalter steht f\u00fcr genau ein beliebiges Zeichen. Zum Beispiel w\u00fcrde <code>?.txt</code> alle Dateien mit einem einzigen Zeichen vor der <code>.txt</code> Endung entsprechen.</p> </li> <li> <p><code>[...]</code>: Dieser Ausdruck definiert eine Zeichenklasse. Zum Beispiel w\u00fcrde <code>[ab]*.txt</code> alle Dateien entsprechen, die mit <code>a</code> oder <code>b</code> beginnen und mit <code>.txt</code> enden.</p> </li> </ul> <p>Es ist zu beachten, dass das Verhalten des Globbing je nach Betriebssystem und Shell etwas variieren kann. Dar\u00fcber hinaus bieten einige Shells erweiterte globbing Optionen, wie z.B. die Bash Shell in Unix, die Funktionen wie rekursive \u00dcbereinstimmungen (<code>**</code>) und Negationen (<code>!</code>) unterst\u00fctzt.</p> <p>Es ist auch wichtig zu beachten, dass, obwohl Globbing und regul\u00e4re Ausdr\u00fccke \u00e4hnlich erscheinen k\u00f6nnen, sie tats\u00e4chlich unterschiedliche Syntax und Funktionen haben. Insbesondere sind die Wildcards in Globbing-Patterns in der Regel weniger m\u00e4chtig und flexibel als die \u00e4quivalenten Konstrukte in regul\u00e4ren Ausdr\u00fccken.</p>"},{"location":"Begriffe/Sprachen/Pattern/#beispiel_1","title":"Beispiel","text":"<p>Ein h\u00e4ufiger Anwendungsfall von Globbing ist die Suche nach Dateien in einem Betriebssystem \u00fcber die Kommandozeile.</p> <p>Nehmen wir an, du bist ein Entwickler und arbeitest an einem gro\u00dfen Projekt mit vielen JavaScript-Dateien. Du hast das Gef\u00fchl, dass du irgendwo einen Fehler gemacht hast, aber du erinnerst dich nicht mehr genau, in welcher Datei. Du wei\u00dft jedoch, dass die Zeile, die du suchst, den Text <code>console.log</code> enth\u00e4lt.</p> <p>Um alle JavaScript-Dateien in deinem aktuellen Verzeichnis nach dieser Zeichenkette zu durchsuchen, k\u00f6nntest du in einer Unix-\u00e4hnlichen Shell folgenden Befehl verwenden:</p> <pre><code>grep 'console.log' *.js\n</code></pre> <p>In diesem Befehl steht <code>*.js</code> f\u00fcr \"jede Datei, die mit <code>.js</code> endet\". Das Sternchen (<code>*</code>) ist ein Beispiel f\u00fcr Globbing. Es fungiert als Platzhalter f\u00fcr \"jeden Text\".</p> <p>Der Befehl <code>grep</code> durchsucht dann jede dieser Dateien nach der Zeichenkette <code>console.log</code> und gibt die entsprechenden Zeilen aus.</p> <p>Das ist ein einfaches Beispiel, aber man kann sich leicht vorstellen, wie n\u00fctzlich Globbing sein kann, wenn man mit vielen Dateien arbeitet und komplexe Muster suchen muss.</p>"},{"location":"Begriffe/Sprachen/Programmiersprachen/","title":"Programmiersprachen","text":""},{"location":"Begriffe/Sprachen/Programmiersprachen/#rust","title":"Rust","text":"<p>Rust ist eine multiparadigmatische Systemprogrammiersprache, die auf Sicherheit, Performance und Parallelit\u00e4t fokussiert ist. Sie wurde von Mozilla Research entwickelt, um den Bedarf an einer sichereren Sprache zu decken, die dennoch hohe Leistung bietet. </p> <p>Rust hat viele innovative Features, wie das Ownership-System mit Borrow Checking, welches hilft, Speicherlecks und Zugriff auf uninitialisierten Speicher zu verhindern, und das macht sie zu einer guten Wahl f\u00fcr Systeme, bei denen die Kontrolle \u00fcber die Systemressourcen entscheidend ist. Rust hat auch eine gute Unterst\u00fctzung f\u00fcr Konkurrenz ohne Datenrennen.</p> <p>Zudem hat Rust eine aktive und wachsende Gemeinschaft und wird in einer Reihe von Projekten eingesetzt, darunter das Servo-Web-Engine-Projekt von Mozilla und das Betriebssystem Redox.</p>"},{"location":"Begriffe/Sprachen/Programmiersprachen/#nodejs","title":"Node.js","text":"<p>Node.js ist eine Open-Source-Laufzeitumgebung, die auf Googles V8 JavaScript-Engine basiert. Sie erm\u00f6glicht es, JavaScript-Code serverseitig auszuf\u00fchren und so skalierbare Netzwerkanwendungen zu erstellen. Dies unterscheidet sich vom traditionellen Einsatz von JavaScript im Web, wo es haupts\u00e4chlich clientseitig in Webbrowsern ausgef\u00fchrt wird.</p> <p>Einer der Hauptvorteile von Node.js ist sein ereignisgesteuertes, nicht blockierendes I/O-Modell, das es ihm erm\u00f6glicht, effizient viele gleichzeitige Verbindungen zu verarbeiten, was es zu einer guten Wahl f\u00fcr Echtzeitanwendungen macht.</p> <p>Node.js bietet auch ein umfangreiches Paket-\u00d6kosystem namens npm (node package manager), das es Entwicklern erleichtert, Code zu teilen und wiederverwendbare Module zu verwenden. Es ist in vielen Bereichen eingesetzt, von Web- und API-Entwicklung bis hin zu Tooling und sogar Desktop-Anwendungsentwicklung.</p>"},{"location":"Begriffe/Sprachen/Skripte/","title":"Skripte","text":""},{"location":"Begriffe/Sprachen/Skripte/#skripte","title":"Skripte","text":"<p>Skriptsprachen sind Programmiersprachen, die entwickelt wurden, um die Automatisierung von Aufgaben zu erleichtern. Im Gegensatz zu kompilierten Sprachen, die den Code vor der Ausf\u00fchrung in Maschinenanweisungen \u00fcbersetzen, werden Skriptsprachen zur Laufzeit von einem Interpreter ausgef\u00fchrt. Dies bedeutet, dass der Code Zeile f\u00fcr Zeile interpretiert und ausgef\u00fchrt wird, ohne dass ein separater Kompilierungsschritt erforderlich ist.</p> <p>Skriptsprachen zeichnen sich oft durch eine einfachere und lesbarere Syntax aus, die es Entwicklern erm\u00f6glicht, schnell und effizient zu programmieren. Sie bieten oft eingebaute Funktionen und Bibliotheken, die h\u00e4ufig ben\u00f6tigte Aufgaben abdecken, wie z.B. das Arbeiten mit Dateien, das Manipulieren von Datenstrukturen oder das Ausf\u00fchren von Systemoperationen. Skriptsprachen werden oft f\u00fcr automatisierte Aufgaben, Skripting, Prototyping, Webentwicklung, Datenverarbeitung und Systemadministration verwendet.</p> <p>Ein weiteres Merkmal von Skriptsprachen ist ihre Plattformunabh\u00e4ngigkeit. Da sie in der Regel von Interpretern ausgef\u00fchrt werden, k\u00f6nnen Skripte auf verschiedenen Betriebssystemen und Plattformen laufen, solange der entsprechende Interpreter verf\u00fcgbar ist.</p> <p>Skriptsprachen bieten oft eine schnelle Entwicklungsumgebung, da \u00c4nderungen im Code sofort getestet und implementiert werden k\u00f6nnen, ohne dass eine Kompilierung erforderlich ist. Dies erm\u00f6glicht eine iterative und flexible Entwicklung, insbesondere f\u00fcr kleinere Aufgaben oder Prototyping.</p> <p>Beispiele f\u00fcr Skriptsprachen sind Python, Ruby, Perl, JavaScript und Bash. Diese Sprachen werden oft f\u00fcr Skripting-Aufgaben, Webentwicklung, Automatisierung und Prototyping verwendet, da sie eine schnelle Entwicklung erm\u00f6glichen und eine breite Palette von Anwendungsbereichen abdecken k\u00f6nnen.</p> <p>Insgesamt bieten Skriptsprachen eine einfache und effiziente M\u00f6glichkeit, wiederholte oder automatisierte Aufgaben zu erledigen und erm\u00f6glichen eine schnelle Entwicklung von Prototypen oder kleineren Projekten. Sie eignen sich gut f\u00fcr Situationen, in denen Flexibilit\u00e4t, schnelle Iteration und Automatisierung gefragt sind.</p>"},{"location":"Begriffe/Sprachen/Skripte/#python","title":"Python","text":"<p>Python ist eine beliebte, vielseitige und benutzerfreundliche Programmiersprache. Mit ihrer einfachen Syntax und ihrer F\u00e4higkeit, schnell von einem Interpreter ausgef\u00fchrt zu werden, ist Python sowohl f\u00fcr Anf\u00e4nger als auch f\u00fcr erfahrene Entwickler geeignet. Python bietet eine gro\u00dfe Auswahl an Bibliotheken und Frameworks, die die Funktionalit\u00e4t erweitern und in verschiedenen Anwendungsbereichen wie Webentwicklung, Datenanalyse, maschinelles Lernen und Automatisierung eingesetzt werden k\u00f6nnen. Dank seiner plattform\u00fcbergreifenden Natur und einer aktiven Entwickler-Community ist Python eine beliebte Wahl f\u00fcr die Softwareentwicklung.</p>"},{"location":"Begriffe/Sprachen/Skripte/#beispiel","title":"Beispiel","text":"<pre><code># Definition einer Funktion, die die Quadratzahl einer Zahl berechnet\ndef quadrat(x):\nreturn x * x\n# Eine Variable mit einem Zahlenwert initialisieren\nzahl = 5\n# Aufruf der quadrat() Funktion mit der Variable zahl als Argument\nergebnis = quadrat(zahl)\n# Ausgabe des Ergebnisses\nprint(\"Die Quadratzahl von\", zahl, \"ist\", ergebnis)\n</code></pre> <p>In diesem Beispiel wird zuerst eine Funktion <code>quadrat()</code> definiert, die die Quadratzahl einer \u00fcbergebenen Zahl berechnet. Dann wird eine Variable <code>zahl</code> mit dem Wert 5 initialisiert. Die Funktion <code>quadrat()</code> wird aufgerufen, indem die Variable <code>zahl</code> als Argument \u00fcbergeben wird, und das Ergebnis wird in der Variablen <code>ergebnis</code> gespeichert. Schlie\u00dflich wird das Ergebnis mit einer Ausgabeanweisung auf der Konsole ausgegeben.</p> <p>Wenn du diesen Code ausf\u00fchrst, wird die Ausgabe folgenderma\u00dfen aussehen:</p> <pre><code>Die Quadratzahl von 5 ist 25\n</code></pre> <p>Dieses Beispiel zeigt, wie Funktionen in Python definiert und aufgerufen werden k\u00f6nnen, wie Variablen verwendet werden und wie Ausgaben auf der Konsole ausgegeben werden. Es ist nur ein kleiner Einblick in die M\u00f6glichkeiten von Python, aber es veranschaulicht die grundlegenden Konzepte, die in der Sprache verwendet werden.</p>"},{"location":"Begriffe/Sprachen/Skripte/#bash","title":"Bash","text":"<p>Bash (Bourne Again Shell) ist eine Skriptsprache und eine Unix-Shell. Es ist eine der h\u00e4ufigsten verwendetetn Skriptsprachen in der Linuxund Unix-Welt. Bash-Skripte werden verwendet, um Aufgaben in der Befehlszeile oder in Skriptdateien zu automatisieren und wiederholbare Prozesse auszuf\u00fchren.</p> <p>Bash-Skripte sind textbasiert und verwenden eine Kombination aus Shell-Befehlen, Variablenzuweisungen, Kontrollstrukturen und Funktionen. Bash-Skripte k\u00f6nnen Aufgaben wie das Ausf\u00fchren von Befehlen, die Verarbeitung von Dateien, das Abrufen von Eingaben vom Benutzer, die Verwaltung von Prozessen und die Automatisierung von Systemaufgaben umfassen.</p> <p>Die Bash-Skriptsprache bietet eine Reihe von Funktionen und Features, darunter bedingte Anweisungen (if-else), Schleifen (for, while), Funktionen, Variablen und Umgebungsvariablen, Dateiverarbeitung, Pipes und Redirections, sowie die M\u00f6glichkeit, externe Befehle und Programme aufzurufen.</p> <p>Bash-Skripte sind plattformunabh\u00e4ngig und k\u00f6nnen auf verschiedenen Unixund Linux-Distributionen sowie auf macOS verwendet werden. Sie sind besonders n\u00fctzlich f\u00fcr die Automatisierung von Systemverwaltungsaufgaben, das Schreiben von Skripten zur Bereitstellung von Software und das Erstellen von benutzerdefinierten Skripten f\u00fcr spezifische Zwecke.</p> <p>Insgesamt ist Bash eine m\u00e4chtige und weit verbreitete Skriptsprache, die in der Unixund Linux-Welt h\u00e4ufig verwendet wird, um Prozesse zu automatisieren und Skripte zur Systemverwaltung zu erstellen.</p>"},{"location":"Begriffe/Sprachen/Skripte/#beispiel_1","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr ein Bash-Skript, das eine Datei erstellt und einen Text darin speichert:</p> <pre><code>#!/bin/bash\n# Variable mit dem Dateinamen\ndatei=\"beispiel.txt\"\n# Text, der in die Datei geschrieben wird\ntext=\"Das ist ein Beispieltext.\"\n# Erstellen und Beschreiben der Datei\necho $text &gt; $datei\n# Ausgabe einer Best\u00e4tigung\necho \"Die Datei wurde erstellt und der Text wurde geschrieben.\"\n</code></pre> <p>In diesem Beispiel wird ein Bash-Skript erstellt, um eine Datei mit dem Namen \"beispiel.txt\" zu erstellen und einen Text (\"Das ist ein Beispieltext.\") in diese Datei zu schreiben. Das Skript verwendet die Befehle <code>echo</code> und die Verwendung von Variablen, um den gew\u00fcnschten Text in die Datei zu schreiben.</p> <p>Um das Skript auszuf\u00fchren, speichere es in einer Datei (z. B. <code>beispiel.sh</code>) und f\u00fchre es mit dem Befehl <code>bash beispiel.sh</code> aus. Das Skript erstellt die Datei \"beispiel.txt\" im selben Verzeichnis, in dem sich das Skript befindet, und schreibt den Text in die Datei. Die Ausgabe des Skripts best\u00e4tigt, dass die Datei erstellt wurde und der Text erfolgreich geschrieben wurde.</p> <p>Dies ist nur ein einfaches Beispiel, das die grundlegende Funktionalit\u00e4t eines Bash-Skripts veranschaulicht. Bash-Skripte k\u00f6nnen jedoch weitaus komplexere Aufgaben durchf\u00fchren, einschlie\u00dflich Bedingungen, Schleifen, Aufrufe von anderen Programmen und vielem mehr.</p>"},{"location":"Begriffe/Sprachen/Sprachen/","title":"Sprachen","text":""},{"location":"Begriffe/Sprachen/Sprachen/#sprachen","title":"Sprachen","text":""},{"location":"Begriffe/Sprachen/Sprachen/#einleitung","title":"Einleitung","text":"<p>In der IT gibt es viele Sprachen, und jede von ihnen ist f\u00fcr einen bestimmten Zweck konzipiert. Diese Vielfalt an Programmiersprachen erm\u00f6glicht es Entwicklern, die beste Wahl f\u00fcr ihre spezifischen Anforderungen zu treffen und die am besten geeignete Sprache f\u00fcr ihre Aufgaben auszuw\u00e4hlen.</p> <p>Einige Programmiersprachen sind aufgrund ihrer Leistung und Geschwindigkeit bekannt, w\u00e4hrend andere sich durch ihre Einfachheit und Benutzerfreundlichkeit auszeichnen. Es gibt Sprachen, die sich auf die Entwicklung von Webanwendungen spezialisiert haben, w\u00e4hrend andere f\u00fcr Datenanalyse oder maschinelles Lernen optimiert sind. Jede Sprache hat ihre eigenen Syntaxregeln, Bibliotheken und Tools, die den Entwicklern helfen, effektiv zu programmieren und bestimmte Aufgaben zu erledigen.</p> <p>Die Wahl der Programmiersprache h\u00e4ngt oft von den spezifischen Anforderungen des Projekts oder der Aufgabe ab. Manchmal m\u00fcssen bestimmte Sprachen verwendet werden, um mit vorhandenen Systemen zu interagieren oder um die beste Leistung f\u00fcr eine bestimmte Anwendung zu erzielen. Andere Male kann die Wahl einer Sprache auf pers\u00f6nlichen Pr\u00e4ferenzen, dem Entwickler-Team oder der Verf\u00fcgbarkeit von Fachwissen basieren.</p> <p>Es ist wichtig zu beachten, dass das Erlernen und Beherrschen einer Programmiersprache Zeit und \u00dcbung erfordert. Jede Sprache hat ihre eigenen Konzepte, Paradigmen und Best Practices, die verstanden werden m\u00fcssen, um effizienten und qualitativ hochwertigen Code zu schreiben. Daher ist es oft hilfreich, sich auf eine oder mehrere Sprachen zu spezialisieren, die den eigenen Bed\u00fcrfnissen und Zielen am besten entsprechen.</p> <p>Insgesamt bieten die unterschiedlichen Programmiersprachen in der IT eine breite Palette an M\u00f6glichkeiten, um Software zu entwickeln und Aufgaben zu automatisieren. Durch die Auswahl der richtigen Sprache f\u00fcr eine spezifische Anforderung k\u00f6nnen Entwickler ihre Produktivit\u00e4t steigern, effiziente L\u00f6sungen entwickeln und die gew\u00fcnschten Ergebnisse erzielen.</p>"},{"location":"Begriffe/Sprachen/Sprachen/#unterseiten","title":"Unterseiten","text":"<ul> <li>Config</li> <li>Doku</li> <li>IaC</li> <li>Vergleiche</li> </ul>"},{"location":"Begriffe/Sprachen/Vergleiche/","title":"Vergleiche","text":""},{"location":"Begriffe/Sprachen/Vergleiche/#vergleiche","title":"Vergleiche","text":"<p>Manchmal braucht man einfach eine kleine Gegen\u00fcberstellung</p>"},{"location":"Begriffe/Sprachen/Vergleiche/#skriptsprache_vs_deklarative_konfigurationssprache","title":"Skriptsprache vs. Deklarative Konfigurationssprache","text":"<p>Eine Skriptsprache ist eine Programmiersprache, die entwickelt wurde, um die Automatisierung von Aufgaben zu erleichtern. Skriptsprachen werden oft f\u00fcr Aufgaben verwendet, bei denen wiederholte oder allt\u00e4gliche Abl\u00e4ufe automatisiert werden sollen. Skriptsprachen erm\u00f6glichen es Entwicklern, Anweisungen schrittweise auszuf\u00fchren und logische Operationen durchzuf\u00fchren.</p> <p>Im Gegensatz dazu ist eine deklarative Konfigurationssprache darauf ausgerichtet, die gew\u00fcnschten Zust\u00e4nde oder Konfigurationen zu beschreiben, ohne explizit die Schritte zur Erreichung dieser Zust\u00e4nde anzugeben. Mit einer deklarativen Konfigurationssprache beschreibst du das gew\u00fcnschte Ergebnis oder die gew\u00fcnschten Eigenschaften, und das System oder der Interpreter k\u00fcmmert sich um die Umsetzung.</p> <p>Eine Skriptsprache wie Python oder JavaScript kann verwendet werden, um Aktionen Schritt f\u00fcr Schritt auszuf\u00fchren, komplexe Berechnungen durchzuf\u00fchren oder auf Ereignisse zu reagieren. Sie bieten Flexibilit\u00e4t und Kontrolle \u00fcber den Ablauf des Programms.</p> <p>Eine deklarative Konfigurationssprache wie YAML oder JSON wird hingegen verwendet, um den gew\u00fcnschten Zustand oder die gew\u00fcnschte Konfiguration von Systemen, Infrastruktur oder Anwendungen zu beschreiben. Anstatt den Ablauf zu steuern, konzentrierst du dich darauf, die gew\u00fcnschten Eigenschaften oder Konfigurationselemente anzugeben. Das System interpretiert dann die deklarativen Anweisungen und passt den Zustand entsprechend an.</p> <p>Der Unterschied zwischen den beiden liegt in der Herangehensweise an die Probleml\u00f6sung. In einer Skriptsprache schreibst du den Code, um den gew\u00fcnschten Ablauf zu steuern, w\u00e4hrend du in einer deklarativen Konfigurationssprache den gew\u00fcnschten Zustand beschreibst und das System die n\u00f6tigen Schritte unternimmt, um diesen Zustand zu erreichen.</p> <p>Beide Ans\u00e4tze haben ihre Vorund Nachteile und werden in verschiedenen Kontexten eingesetzt. Skriptsprachen bieten Flexibilit\u00e4t und Kontrolle, w\u00e4hrend deklarative Konfigurationssprachen die Abstraktion von Details und die Wiederholbarkeit f\u00f6rdern. Die Wahl zwischen den beiden h\u00e4ngt von den Anforderungen des jeweiligen Szenarios ab.</p>"},{"location":"Begriffe/Sprachen/Vergleiche/#assembly_vs_hohere_programmiersprachen","title":"Assembly vs. H\u00f6here Programmiersprachen","text":"<p>\u2139 Info: Hatten wir nicht angesprochen aber ich erinnerte mich an den Vergleich und wollte ihn abspeichern</p> <p>Stell dir vor, du m\u00f6chtest ein Haus bauen. Wenn du mit Assembly arbeitest, ist es so, als ob du ein erfahrener Bauunternehmer bist, der jede einzelne Komponente des Hauses genau kennt. Du wei\u00dft, wie jedes Rohr verlegt, jede Wand aufgebaut und jede elektrische Leitung verlegt werden muss. Du hast eine sehr detaillierte Anleitung, um das Haus von Grund auf zu bauen. Aber um diese Anleitung zu verstehen und zu befolgen, musst du ein Experte sein und alles im Detail verstehen.</p> <p>Auf der anderen Seite, wenn du mit einer h\u00f6heren Programmiersprache wie Java arbeitest, ist es so, als ob du ein Architekt bist, der das Haus entwirft. Du musst nicht jedes einzelne Detail kennen oder wissen, wie genau es implementiert wird. Stattdessen erstellst du einen Plan (Code), der die Anforderungen und Spezifikationen des Hauses beschreibt. Du verwendest eine abstraktere Sprache, um das Design zu kommunizieren, \u00e4hnlich wie wenn du Spanisch sprichst, um jemandem zu erkl\u00e4ren, wie das Haus am Ende aussehen soll.</p> <p>Der Unterschied liegt darin, dass Assembly sehr niedrig auf der Ebene der Hardware arbeitet und direkten Zugriff auf die spezifischen Maschinenbefehle hat. Es erfordert ein detailliertes Verst\u00e4ndnis der Hardware-Architektur und ist sehr genau und effizient. Es erm\u00f6glicht volle Kontrolle, aber es ist auch komplexer und erfordert mehr Aufwand, um effektiv damit zu arbeiten.</p> <p>H\u00f6here Programmiersprachen abstrahieren diese Details und bieten eine einfachere und benutzerfreundlichere Syntax. Sie erm\u00f6glichen es den Entwicklern, auf einem h\u00f6heren Level zu arbeiten, sich auf die L\u00f6sung von Problemen und die Entwicklung von Algorithmen zu konzentrieren, ohne sich um die Details der Hardware k\u00fcmmern zu m\u00fcssen. Dies macht die Entwicklung schneller, flexibler und leichter zug\u00e4nglich f\u00fcr Entwickler, die m\u00f6glicherweise nicht \u00fcber spezifische Hardwarekenntnisse verf\u00fcgen.</p> <p>Die Analogie verdeutlicht also, dass Assembly aufgrund seiner geringen Ebene der Hardwarekenntnisse und der direkten Kontrolle \u00fcber die Hardware sehr pr\u00e4zise und leistungsf\u00e4hig ist, w\u00e4hrend h\u00f6here Programmiersprachen eine h\u00f6here Abstraktionsebene bieten, die es den Entwicklern erm\u00f6glicht, effizienter und schneller zu arbeiten, ohne sich um die Details der Hardware k\u00fcmmern zu m\u00fcssen.</p>"},{"location":"Sprachen/Config/","title":"Config","text":""},{"location":"Sprachen/Config/#sprachen","title":"Sprachen","text":""},{"location":"Sprachen/Config/#yaml","title":"YAML","text":"<p>YAML (YAML Ain't Markup Language) ist eine einfache, menschenlesbare Datenstruktursprache. Es wird oft als Dateiformat f\u00fcr die Konfiguration von Anwendungen und die \u00dcbertragung von Daten verwendet. YAML-Dateien verwenden eine textbasierte Syntax, die darauf abzielt, einfach zu sein und leicht verstanden zu werden. YAML kann verwendet werden, um komplexe Datenstrukturen wie Listen, Objekte und verschachtelte Hierarchien darzustellen. Es ist besonders n\u00fctzlich f\u00fcr Konfigurationsdateien in Anwendungen oder f\u00fcr den Austausch von Daten zwischen verschiedenen Systemen.</p>"},{"location":"Sprachen/Config/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr YAML, das eine Konfigurationsdatei f\u00fcr eine Anwendung darstellt:</p> <pre><code>## Konfigurationsdatei f\u00fcr eine Anwendung\napp:\nname: Mein Beispiel-App\nversion: 1.0.0\nenvironment: production\ndatabase:\nhost: localhost\nport: 5432\nusername: myuser\npassword: mypassword\ndbname: mydatabase\nserver:\nhost: 0.0.0.0\nport: 8080\n</code></pre> <p>In diesem Beispiel gibt es drei Hauptbereiche: <code>app</code>, <code>database</code> und <code>server</code>. Unter jedem Bereich sind Schl\u00fcssel-Wert-Paare aufgef\u00fchrt, die verschiedene Einstellungen f\u00fcr die entsprechenden Komponenten darstellen.</p> <p>Die <code>app</code>-Sektion enth\u00e4lt Informationen \u00fcber den Namen, die Version und die Umgebung der Anwendung.</p> <p>Die <code>database</code>-Sektion enth\u00e4lt Konfigurationsdetails f\u00fcr die Datenbankverbindung, wie den Host, den Port, den Benutzernamen, das Passwort und den Datenbanknamen.</p> <p>Die <code>server</code>-Sektion enth\u00e4lt Konfigurationseinstellungen f\u00fcr den Webserver, wie den Host und den Port, auf dem die Anwendung ausgef\u00fchrt werden soll.</p> <p>Diese YAML-Konfigurationsdatei kann von der Anwendung eingelesen werden, um die entsprechenden Einstellungen zu laden und die Anwendung entsprechend zu konfigurieren. YAML bietet eine einfache und lesbare Syntax, um Datenstrukturen zu definieren und zu organisieren.</p>"},{"location":"Sprachen/Config/#json","title":"JSON","text":"<p>JSON steht f\u00fcr JavaScript Object Notation. Es handelt sich dabei um ein leichtgewichtiges Datenformat, das f\u00fcr den Datenaustausch zwischen Server und Client im Internet weit verbreitet ist. JSON-Daten werden als Sammlungen von Schl\u00fcssel-Wert-Paaren dargestellt, \u00e4hnlich wie Objekte in JavaScript. Ein Vorteil von JSON ist, dass es von Menschen leicht lesbar ist und von vielen Programmiersprachen leicht verarbeitet werden kann.</p>"},{"location":"Sprachen/Config/#beispiel_1","title":"Beispiel","text":"<p>Ein einfaches Beispiel f\u00fcr JSON k\u00f6nnte so aussehen:</p> <pre><code>{\n\"Name\": \"Max Mustermann\",\n\"Alter\": 35,\n\"Beruf\": \"Softwareentwickler\"\n}\n</code></pre> <p>In diesem Beispiel sind \"Name\", \"Alter\" und \"Beruf\" die Schl\u00fcssel und \"Max Mustermann\", 35 und \"Softwareentwickler\" sind die zugeh\u00f6rigen Werte.</p>"},{"location":"Sprachen/Config/#konzepte","title":"Konzepte","text":""},{"location":"Sprachen/Config/#key-value","title":"Key-Value","text":"<p>Ein Key-Value-Pair ist eine grundlegende Datenrepr\u00e4sentation, die in vielen Kontexten verwendet wird. In einem Key-Value-Pair ist der Schl\u00fcssel ein eindeutiger Bezeichner, der auf einen Wert verweist. Diese Struktur ist besonders n\u00fctzlich in Situationen, in denen Sie schnell auf einen Wert zugreifen m\u00f6chten, indem Sie einfach den Schl\u00fcssel kennen. Sie wird in vielen Datenstrukturen und Datenformaten, einschlie\u00dflich JSON, und in Key-Value-Datenbanken verwendet.</p>"},{"location":"Sprachen/Config/#tags","title":"Tags","text":"<p>\"Tags\" oder \"Etiketten\" werden in vielen Kontexten in der Informationstechnologie verwendet und dienen im Allgemeinen dazu, Informationen zu organisieren und zu kategorisieren.</p> <p>Hier sind ein paar Beispiele, wie Tags verwendet werden:</p> <ul> <li>In Webtechnologien sind HTML-Tags ein grundlegendes Element der Webseitenstruktur. Sie werden verwendet, um verschiedene Teile des Inhalts zu kennzeichnen und zu strukturieren, wie z.B. \u00dcberschriften, Abs\u00e4tze, Links, Bilder usw.</li> <li>In der Softwareentwicklung k\u00f6nnen Tags in Versionskontrollsystemen wie Git verwendet werden, um spezifische Punkte in der Historie des Codes zu markieren, wie z.B. eine ver\u00f6ffentlichte Version eines Programms.</li> <li>In der Cloud-Computing werden Tags h\u00e4ufig verwendet, um Ressourcen (wie Server, Datenbanken, Netzwerke usw.) zu kategorisieren. So kann beispielsweise ein Tag verwendet werden, um anzugeben, wer der Besitzer einer Ressource ist, zu welchem Projekt sie geh\u00f6rt, oder ob sie in einer Testoder Produktionsumgebung l\u00e4uft.</li> <li>In Datenbanken k\u00f6nnen Tags verwendet werden, um Datens\u00e4tze zu kategorisieren oder um Metadaten hinzuzuf\u00fcgen.</li> </ul> <p>In all diesen Kontexten helfen Tags dabei, Ordnung und Struktur in gro\u00dfe Mengen von Informationen zu bringen und erm\u00f6glichen es Benutzern, schnell und effizient auf bestimmte Informationen zuzugreifen.</p>"},{"location":"Sprachen/Config/#elemente","title":"Elemente","text":""},{"location":"Sprachen/Config/#umgebungsvariablen","title":"Umgebungsvariablen","text":"<p>Umgebungsvariablen sind ein Schl\u00fcsselelement von Betriebssystemen und dienen dazu, bestimmte Werte oder Informationen, die von Prozessen oder Programmen verwendet werden, dynamisch zur Verf\u00fcgung zu stellen. Sie k\u00f6nnen von den meisten Betriebssystemen, darunter Linux, Unix, Windows und MacOS, verwendet werden.</p> <p>Eine Umgebungsvariable hat einen Namen und einen zugeh\u00f6rigen Wert. Diese Werte k\u00f6nnen von einfachen Zeichenketten oder Zahlen bis hin zu Pfaden von Verzeichnissen oder Dateien variieren. Beispielsweise kann die Umgebungsvariable \"PATH\" auf Unix-basierten Systemen dazu verwendet werden, die Verzeichnisse zu spezifizieren, in denen das Betriebssystem nach ausf\u00fchrbaren Dateien suchen soll.</p> <p>Umgebungsvariablen k\u00f6nnen auch zur Konfiguration von Softwareanwendungen verwendet werden. Zum Beispiel kann eine Anwendung eine Umgebungsvariable verwenden, um die Adresse eines Servers zu speichern, mit dem sie kommuniziert, oder um festzulegen, in welchem Modus sie ausgef\u00fchrt wird (z.B. Entwicklungs-, Testoder Produktionsmodus).</p> <p>Umgebungsvariablen k\u00f6nnen \u00fcber die Kommandozeile oder \u00fcber das Betriebssystem selbst eingestellt und abgerufen werden. In Unix-basierten Systemen, wie Linux oder MacOS, verwendet man h\u00e4ufig die Befehle \"export\" zum Setzen und \"echo\" zum Abrufen von Umgebungsvariablen. In Windows verwendet man \"set\" zum Setzen und Abrufen von Umgebungsvariablen.</p> <p>Ein weiterer Vorteil der Verwendung von Umgebungsvariablen ist, dass sie dazu beitragen, die Sicherheit zu erh\u00f6hen, indem sie beispielsweise sensible Informationen wie Passw\u00f6rter oder API-Schl\u00fcssel speichern. Auf diese Weise m\u00fcssen diese Werte nicht direkt in den Anwendungscode geschrieben werden.</p>"},{"location":"Sprachen/Config/#beispiel_2","title":"Beispiel","text":"<p>Nehmen wir an, Sie entwickeln eine Anwendung, die mit einer Datenbank kommuniziert. Sie k\u00f6nnten Umgebungsvariablen verwenden, um die Verbindungsinformationen f\u00fcr die Datenbank zu speichern. Das k\u00f6nnte so aussehen:</p> <ul> <li><code>DB_HOST</code> k\u00f6nnte den Hostnamen oder die IP-Adresse des Datenbankservers speichern, z. B. <code>DB_HOST=192.168.1.1</code> oder <code>DB_HOST=dbserver.meinefirma.com</code>.</li> <li><code>DB_USER</code> k\u00f6nnte den Benutzernamen f\u00fcr die Datenbankverbindung speichern, z. B. <code>DB_USER=meinbenutzer</code>.</li> <li><code>DB_PASS</code> k\u00f6nnte das Passwort f\u00fcr die Datenbankverbindung speichern, z. B. <code>DB_PASS=meinpasswort</code>.</li> </ul> <p>In Ihrem Anwendungscode k\u00f6nnten Sie dann auf diese Variablen zugreifen, um eine Verbindung zur Datenbank herzustellen, anstatt die tats\u00e4chlichen Werte direkt in Ihren Code zu schreiben. In vielen Programmiersprachen k\u00f6nnen Sie auf Umgebungsvariablen mit einer speziellen Funktion oder Methode zugreifen. Zum Beispiel in Python k\u00f6nnten Sie die <code>os.environ</code> Funktion verwenden:</p> <pre><code>import os\ndb_host = os.environ['DB_HOST']\ndb_user = os.environ['DB_USER']\ndb_pass = os.environ['DB_PASS']\n</code></pre> <p>Durch die Verwendung von Umgebungsvariablen k\u00f6nnen Sie die Datenbankverbindungsinformationen leicht \u00e4ndern, ohne Ihren Anwendungscode zu \u00e4ndern. Au\u00dferdem verhindert es, dass sensible Informationen wie Datenbankpassw\u00f6rter in Ihrem Code erscheinen.</p>"},{"location":"Sprachen/Doku/","title":"Doku","text":""},{"location":"Sprachen/Doku/#markdown","title":"Markdown","text":"<p>Markdown ist eine einfache Auszeichnungssprache, die verwendet wird, um formatierten Text zu schreiben. Es ist entworfen worden, um schnell und einfach lesbare und schreibbare Texte zu erstellen, die in HTML oder anderen Formaten wie PDF oder DOCX umgewandelt werden k\u00f6nnen. Markdown erm\u00f6glicht es, Texte mit einfachen Syntaxelementen wie \u00dcberschriften, Listen, Fettdruck, Kursivdruck, Links und Bildern zu formatieren, ohne auf komplexe HTML-Tags zur\u00fcckgreifen zu m\u00fcssen. Es ist weit verbreitet f\u00fcr die Erstellung von Dokumentationen, Readme-Dateien, Forenbeitr\u00e4gen und Blogs, da es eine einfachere und effizientere M\u00f6glichkeit bietet, formatierten Text zu schreiben.</p> <p>\u2139 Info: Dieser Text und alles was hier steht ist in Markdown geschrieben</p>"},{"location":"Sprachen/Doku/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr Markdown, um einen formatierten Text zu erstellen:</p> <pre><code># Mein Beispiel-Text\nDies ist ein **fettgedruckter** Text.\n\nHier ist eine Liste:\n- Erster Punkt\n- Zweiter Punkt\n- Dritter Punkt\n\nEin Link zu [OpenAI](https://openai.com).\n\n&gt; Ein Zitat oder eine hervorgehobene Textpassage.\n</code></pre>"},{"location":"Sprachen/Doku/#mein_beispiel-text","title":"Mein Beispiel-Text","text":"<p>Dies ist ein fettgedruckter Text.</p> <p>Hier ist eine Liste: - Erster Punkt - Zweiter Punkt - Dritter Punkt</p> <p>Ein Link zu OpenAI.</p> <p>Ein Zitat oder eine hervorgehobene Textpassage.</p>"},{"location":"Sprachen/IaC/","title":"IaC","text":""},{"location":"Sprachen/IaC/#was_ist_iac","title":"Was Ist IaC?","text":"<p>IaC steht f\u00fcr Infrastructure-as-Code und bezieht sich auf den Ansatz, die Infrastruktur eines Systems mithilfe von Code zu definieren und zu verwalten. Anstatt die Infrastruktur manuell zu konfigurieren, k\u00f6nnen Entwickler mit IaC-Tools wie Terraform eine deklarative Konfigurationssprache verwenden, um Ressourcen wie Server, Netzwerkkomponenten und Cloud-Services zu beschreiben. Diese Beschreibungen werden dann verwendet, um die Infrastruktur automatisch bereitzustellen, zu ver\u00e4ndern und zu l\u00f6schen.</p>"},{"location":"Sprachen/IaC/#terraform","title":"Terraform","text":"<p>Terraform ist ein sogenanntes Infrastructure-as-Code (IaC)-Werkzeug. Es erm\u00f6glicht Entwicklern und Systemadministratoren, die Infrastruktur f\u00fcr ihre Anwendungen und Systeme \u00fcber eine Codebasis zu verwalten.</p> <p>Terraform erm\u00f6glicht es Entwicklern, Infrastrukturressourcen \u00fcber verschiedene Cloud-Anbieter hinweg zu verwalten, darunter auch gro\u00dfe Cloud-Plattformen wie Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP) und viele andere. Es bietet eine einheitliche Schnittstelle und Abstraktionsschicht, um Infrastrukturkonfigurationen plattform\u00fcbergreifend und wiederverwendbar zu machen.</p> <p>Mit Terraform k\u00f6nnen Entwickler ihre Infrastruktur in Form von Code versionieren, sodass \u00c4nderungen und Updates verfolgt und verwaltet werden k\u00f6nnen. Dadurch wird die Infrastrukturverwaltung konsistent, skalierbar und reproduzierbar. Terraform erm\u00f6glicht auch die automatische Skalierung und das dynamische Hinzuf\u00fcgen oder Entfernen von Ressourcen basierend auf Anforderungen oder Last.</p> <p>Zusammenfassend ist Terraform ein IaC-Tool, das es Entwicklern erm\u00f6glicht, die Infrastruktur ihrer Anwendungen und Systeme \u00fcber Code zu verwalten. Es bietet eine plattform\u00fcbergreifende Schnittstelle zur Bereitstellung, Ver\u00e4nderung und L\u00f6schung von Infrastrukturressourcen in verschiedenen Cloud-Umgebungen. Dies erleichtert die Automatisierung, Skalierung und Wiederholbarkeit der Infrastrukturverwaltung.</p>"},{"location":"Sprachen/IaC/#eli5","title":"ELI5","text":"<p>Stell dir vor, du baust ein Lego-Set zusammen. Du hast viele verschiedene Lego-Steine und m\u00f6chtest sie zu einem bestimmten Modell zusammensetzen. Aber statt jedes Mal von vorne anzufangen, wenn du das Modell \u00e4ndern m\u00f6chtest, verwendest du eine Anleitung, die dir sagt, welche Steine du wo platzieren sollst.</p> <p>Terraform ist wie diese Anleitung, aber f\u00fcr die Erstellung von Computer-Infrastruktur. Anstatt die Infrastruktur manuell Schritt f\u00fcr Schritt aufzubauen, kannst du Terraform verwenden, um eine Anleitung zu erstellen, wie deine Infrastruktur aussehen soll.</p> <p>Du beschreibst deine gew\u00fcnschte Infrastruktur in einer speziellen Sprache, \u00e4hnlich wie eine Liste der ben\u00f6tigten Lego-Steine und wie sie zusammengebaut werden sollen. Terraform verwendet dann diese Anleitung, um die Infrastruktur automatisch zu erstellen, zu \u00e4ndern oder sogar zu l\u00f6schen.</p> <p>Terraform unterst\u00fctzt verschiedene Cloud-Plattformen wie Amazon Web Services (AWS), Microsoft Azure oder Google Cloud Platform (GCP). Es kennt die richtigen Schritte und die Reihenfolge, um die entsprechenden Ressourcen in der Cloud zu erstellen, wie Server, Netzwerke oder Datenbanken.</p> <p>Wenn du \u00c4nderungen an deiner Infrastruktur vornehmen m\u00f6chtest, \u00e4nderst du einfach die Anleitung in Terraform. Es \u00fcberpr\u00fcft dann, welche Teile aktualisiert werden m\u00fcssen und passt die Infrastruktur entsprechend an. So kannst du deine Infrastruktur einfach verwalten, ohne alles von Grund auf neu zu erstellen.</p> <p>Zusammengefasst ist Terraform wie eine Anleitung, die dir sagt, wie du deine Computer-Infrastruktur aufbauen kannst. Du beschreibst, was du brauchst, und Terraform sorgt daf\u00fcr, dass die Infrastruktur automatisch erstellt wird. Es hilft dir, Zeit zu sparen und deine Infrastruktur effizient zu verwalten, \u00e4hnlich wie beim Zusammenbauen eines Lego-Sets mit einer Anleitung.</p>"},{"location":"Sprachen/IaC/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr Terraform, um eine AWS EC2-Instanz zu erstellen:</p> <pre><code># Provider konfigurieren (AWS)\nprovider \"aws\" {\nregion = \"us-west-2\"\n}\n# EC2-Instanz erstellen\nresource \"aws_instance\" \"example\" {\nami           = \"ami-0c94855ba95c71c99\"\ninstance_type = \"t2.micro\"\n}\n# Ausgabe der erstellten Instanz\noutput \"instance_ip\" {\nvalue = aws_instance.example.public_ip\n}\n</code></pre> <p>In diesem Beispiel wird eine AWS EC2-Instanz mit der angegebenen AMI (Amazon Machine Image) und Instanztyp erstellt. Das <code>provider</code>-Block definiert die AWS-Region, in der die Instanz erstellt werden soll.</p> <p>Die <code>resource</code>-Block definiert die AWS-Instanz mit dem Namen \"example\". Sie verwendet die angegebene AMI und den Instanztyp, um die Instanz zu konfigurieren.</p> <p>Der <code>output</code>-Block gibt die \u00f6ffentliche IP-Adresse der erstellten Instanz aus.</p>"},{"location":"Sprachen/IaC/#provider","title":"Provider","text":"<p>Ein Terraform Provider ist ein Plugin, das Terraform erm\u00f6glicht, mit einer spezifischen API oder einem spezifischen Service zu interagieren. Jeder Provider f\u00fcgt Terraform eine Reihe von Ressourcentypen hinzu, die es erstellen und verwalten kann.</p> <p>Zum Beispiel k\u00f6nnte ein AWS Provider es Ihnen erm\u00f6glichen, EC2-Instanzen, S3-Buckets, RDS-Datenbanken und andere AWS-Ressourcen zu erstellen und zu verwalten. Ein Google Cloud Platform Provider k\u00f6nnte es Ihnen erm\u00f6glichen, Compute-Instanzen, Cloud Storage-Buckets, SQL-Datenbanken und andere GCP-Ressourcen zu erstellen und zu verwalten.</p> <p>Es gibt Terraform Provider f\u00fcr eine Vielzahl von \u00f6ffentlichen Clouds, private Clouds, SaaS-Anwendungen und andere Dienste. In vielen F\u00e4llen werden diese Provider von den Unternehmen selbst oder von der Open-Source-Community gepflegt und aktualisiert.</p> <p>Mit diesen Providern kann Terraform als eine Art universelle \"Sprache\" f\u00fcr die Infrastrukturverwaltung dienen, die es Ihnen erm\u00f6glicht, Ressourcen in vielen verschiedenen Umgebungen mit einer einheitlichen, konsistenten Syntax zu verwalten.</p>"},{"location":"Sprachen/Pattern/","title":"Pattern","text":""},{"location":"Sprachen/Pattern/#regular_expressions","title":"Regular Expressions","text":"<p>Regul\u00e4re Ausdr\u00fccke, oft abgek\u00fcrzt als RegEx oder RegExp, sind eine sehr m\u00e4chtige Methode zur Mustererkennung in Text. Sie sind in vielen Programmiersprachen eingebaut und werden oft zur Textsuche, Textmanipulation und zum Parsen verwendet.</p> <p>Eine regul\u00e4re Ausdruck ist im Grunde eine Sequenz von Zeichen, die ein Muster bildet. Dieses Muster kann verwendet werden, um \u00dcbereinstimmungen in anderen Strings zu finden oder zu testen.</p>"},{"location":"Sprachen/Pattern/#komponenten","title":"Komponenten","text":"<p>Hier sind einige grundlegende Komponenten, die in regul\u00e4ren Ausdr\u00fccken verwendet werden:</p>"},{"location":"Sprachen/Pattern/#literal-zeichen","title":"Literal-Zeichen","text":"<p>Die einfachsten Muster bestehen aus Literal-Zeichen, wie z. B. <code>abc</code>, das eine \u00dcbereinstimmung mit dem genauen String <code>abc</code> findet.</p>"},{"location":"Sprachen/Pattern/#metazeichen","title":"Metazeichen","text":"<p>Diese haben eine spezielle Bedeutung, z. B. <code>.</code> (findet jedes einzelne Zeichen au\u00dfer einem Zeilenumbruch), <code>*</code> (findet null oder mehr Wiederholungen des vorhergehenden Zeichens), <code>+</code> (findet eine oder mehr Wiederholungen des vorhergehenden Zeichens) usw.</p>"},{"location":"Sprachen/Pattern/#charakterklassen","title":"Charakterklassen","text":"<p>Sie stellen einen Satz von Zeichen dar, von denen jedes ein Treffer sein kann. Zum Beispiel steht <code>[abc]</code> f\u00fcr ein Zeichen, das entweder <code>a</code>, <code>b</code> oder <code>c</code> ist.</p>"},{"location":"Sprachen/Pattern/#quantifizierer","title":"Quantifizierer","text":"<p>Diese bestimmen, wie oft ein Element wiederholt wird. Beispielsweise steht <code>{3}</code> f\u00fcr genau dreimal, <code>{3,}</code> f\u00fcr dreimal oder mehr, und <code>{3,5}</code> f\u00fcr zwischen drei und f\u00fcnf Mal.</p>"},{"location":"Sprachen/Pattern/#anker","title":"Anker","text":"<p>Diese werden verwendet, um den Anfang <code>^</code> oder das Ende <code>$</code> eines Strings oder einer Zeile zu bestimmen.</p>"},{"location":"Sprachen/Pattern/#gruppen_und_ruckverweise","title":"Gruppen Und R\u00fcckverweise","text":"<p>Zeichen k\u00f6nnen in Gruppen <code>()</code> eingefasst und sp\u00e4ter mit <code>\\1</code>, <code>\\2</code> usw. referenziert werden.</p>"},{"location":"Sprachen/Pattern/#escape-sequenzen","title":"Escape-Sequenzen","text":"<p>Einige Zeichen m\u00fcssen \"escaped\" werden, indem man ihnen ein <code>\\</code> voranstellt, um sie w\u00f6rtlich zu nehmen, z. B. <code>\\.</code>, um einen tats\u00e4chlichen Punkt zu finden, anstatt jedes Zeichen.</p>"},{"location":"Sprachen/Pattern/#beispiel","title":"Beispiel","text":"<p>Hier ist ein Anwendungsfall f\u00fcr regul\u00e4re Ausdr\u00fccke (RegEx).</p> <p>Angenommen, du hast eine Liste mit E-Mail-Adressen und du m\u00f6chtest pr\u00fcfen, ob sie ein g\u00fcltiges Format haben. Eine einfache (aber nicht vollst\u00e4ndig akkurate) RegEx zum \u00dcberpr\u00fcfen des E-Mail-Formats k\u00f6nnte so aussehen:</p> <pre><code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n</code></pre> <p>Lass uns diesen regul\u00e4ren Ausdruck St\u00fcck f\u00fcr St\u00fcck durchgehen:</p> <ul> <li><code>^</code> bezeichnet den Anfang der Zeile.</li> <li><code>[a-zA-Z0-9._%+-]+</code> steht f\u00fcr einen oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben), Ziffern, Punkte, Unterstriche, Prozentzeichen, Plus- oder Minuszeichen.</li> <li><code>@</code> ist das @-Zeichen selbst.</li> <li><code>[a-zA-Z0-9.-]+</code> steht wieder f\u00fcr einen oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben), Ziffern, Punkte oder Bindestriche.</li> <li><code>\\.</code> ist ein Punkt.</li> <li><code>[a-zA-Z]{2,}</code> steht f\u00fcr zwei oder mehr Buchstaben (Gro\u00df- oder Kleinbuchstaben).</li> <li><code>$</code> bezeichnet das Ende der Zeile.</li> </ul> <p>Dieser regul\u00e4re Ausdruck w\u00fcrde also auf Zeichenketten wie \"example@example.com\" passen, aber nicht auf \"example@\", da dies kein g\u00fcltiges E-Mail-Format ist.</p> <p>Bitte beachte, dass diese RegEx nicht alle g\u00fcltigen E-Mail-Adressen korrekt erkennt und viele unzul\u00e4ssige als g\u00fcltig markieren k\u00f6nnte. E-Mail-Adressen folgen einer ziemlich komplexen Spezifikation und es ist ziemlich schwierig, sie mit einer einfachen RegEx vollst\u00e4ndig korrekt zu validieren.</p> <p>Aber dieses Beispiel zeigt gut, wie man regul\u00e4re Ausdr\u00fccke zum \u00dcberpr\u00fcfen von Textmustern verwenden kann.</p>"},{"location":"Sprachen/Pattern/#zu_beachten","title":"Zu Beachten","text":"<p>Es ist wichtig zu beachten, dass die genaue Syntax und die verf\u00fcgbaren Funktionen von regul\u00e4ren Ausdr\u00fccken je nach Programmiersprache oder Tool variieren k\u00f6nnen.</p> <p>Obwohl regul\u00e4re Ausdr\u00fccke sehr m\u00e4chtig sind, k\u00f6nnen sie auch sehr komplex und schwer zu lesen sein, insbesondere f\u00fcr komplizierte Muster. Daher ist es oft hilfreich, sie sorgf\u00e4ltig zu dokumentieren und zu testen.</p>"},{"location":"Sprachen/Pattern/#globbing","title":"Globbing","text":"<p>\"Globbing\" bezeichnet in der Informatik ein Verfahren zur \u00dcbereinstimmung mit bestimmten Zeichenmustern in Strings. Es wird oft in Unix-Shell-Umgebungen und in Programmiersprachen verwendet, die \u00e4hnliche F\u00e4higkeiten haben.</p> <p>Im Allgemeinen wird Globbing verwendet, um mehrere Dateinamen oder Ordner auf einmal zu spezifizieren, indem man spezielle Zeichen oder Wildcards verwendet. Hier sind die grundlegenden Wildcards und ihre Bedeutung im Kontext des Globbing:</p> <ul> <li> <p><code>*</code>: Dieser Platzhalter steht f\u00fcr eine beliebige Anzahl von beliebigen Zeichen. Zum Beispiel w\u00fcrde <code>*.txt</code> alle Dateien mit der Endung <code>.txt</code> im aktuellen Verzeichnis entsprechen.</p> </li> <li> <p><code>?</code>: Dieser Platzhalter steht f\u00fcr genau ein beliebiges Zeichen. Zum Beispiel w\u00fcrde <code>?.txt</code> alle Dateien mit einem einzigen Zeichen vor der <code>.txt</code> Endung entsprechen.</p> </li> <li> <p><code>[...]</code>: Dieser Ausdruck definiert eine Zeichenklasse. Zum Beispiel w\u00fcrde <code>[ab]*.txt</code> alle Dateien entsprechen, die mit <code>a</code> oder <code>b</code> beginnen und mit <code>.txt</code> enden.</p> </li> </ul> <p>Es ist zu beachten, dass das Verhalten des Globbing je nach Betriebssystem und Shell etwas variieren kann. Dar\u00fcber hinaus bieten einige Shells erweiterte globbing Optionen, wie z.B. die Bash Shell in Unix, die Funktionen wie rekursive \u00dcbereinstimmungen (<code>**</code>) und Negationen (<code>!</code>) unterst\u00fctzt.</p> <p>Es ist auch wichtig zu beachten, dass, obwohl Globbing und regul\u00e4re Ausdr\u00fccke \u00e4hnlich erscheinen k\u00f6nnen, sie tats\u00e4chlich unterschiedliche Syntax und Funktionen haben. Insbesondere sind die Wildcards in Globbing-Patterns in der Regel weniger m\u00e4chtig und flexibel als die \u00e4quivalenten Konstrukte in regul\u00e4ren Ausdr\u00fccken.</p>"},{"location":"Sprachen/Pattern/#beispiel_1","title":"Beispiel","text":"<p>Ein h\u00e4ufiger Anwendungsfall von Globbing ist die Suche nach Dateien in einem Betriebssystem \u00fcber die Kommandozeile.</p> <p>Nehmen wir an, du bist ein Entwickler und arbeitest an einem gro\u00dfen Projekt mit vielen JavaScript-Dateien. Du hast das Gef\u00fchl, dass du irgendwo einen Fehler gemacht hast, aber du erinnerst dich nicht mehr genau, in welcher Datei. Du wei\u00dft jedoch, dass die Zeile, die du suchst, den Text <code>console.log</code> enth\u00e4lt.</p> <p>Um alle JavaScript-Dateien in deinem aktuellen Verzeichnis nach dieser Zeichenkette zu durchsuchen, k\u00f6nntest du in einer Unix-\u00e4hnlichen Shell folgenden Befehl verwenden:</p> <pre><code>grep 'console.log' *.js\n</code></pre> <p>In diesem Befehl steht <code>*.js</code> f\u00fcr \"jede Datei, die mit <code>.js</code> endet\". Das Sternchen (<code>*</code>) ist ein Beispiel f\u00fcr Globbing. Es fungiert als Platzhalter f\u00fcr \"jeden Text\".</p> <p>Der Befehl <code>grep</code> durchsucht dann jede dieser Dateien nach der Zeichenkette <code>console.log</code> und gibt die entsprechenden Zeilen aus.</p> <p>Das ist ein einfaches Beispiel, aber man kann sich leicht vorstellen, wie n\u00fctzlich Globbing sein kann, wenn man mit vielen Dateien arbeitet und komplexe Muster suchen muss.</p>"},{"location":"Sprachen/Programmiersprachen/","title":"Programmiersprachen","text":""},{"location":"Sprachen/Programmiersprachen/#rust","title":"Rust","text":"<p>Rust ist eine multiparadigmatische Systemprogrammiersprache, die auf Sicherheit, Performance und Parallelit\u00e4t fokussiert ist. Sie wurde von Mozilla Research entwickelt, um den Bedarf an einer sichereren Sprache zu decken, die dennoch hohe Leistung bietet.</p> <p>Rust hat viele innovative Features, wie das Ownership-System mit Borrow Checking, welches hilft, Speicherlecks und Zugriff auf uninitialisierten Speicher zu verhindern, und das macht sie zu einer guten Wahl f\u00fcr Systeme, bei denen die Kontrolle \u00fcber die Systemressourcen entscheidend ist. Rust hat auch eine gute Unterst\u00fctzung f\u00fcr Konkurrenz ohne Datenrennen.</p> <p>Zudem hat Rust eine aktive und wachsende Gemeinschaft und wird in einer Reihe von Projekten eingesetzt, darunter das Servo-Web-Engine-Projekt von Mozilla und das Betriebssystem Redox.</p>"},{"location":"Sprachen/Programmiersprachen/#nodejs","title":"Node.js","text":"<p>Node.js ist eine Open-Source-Laufzeitumgebung, die auf Googles V8 JavaScript-Engine basiert. Sie erm\u00f6glicht es, JavaScript-Code serverseitig auszuf\u00fchren und so skalierbare Netzwerkanwendungen zu erstellen. Dies unterscheidet sich vom traditionellen Einsatz von JavaScript im Web, wo es haupts\u00e4chlich clientseitig in Webbrowsern ausgef\u00fchrt wird.</p> <p>Einer der Hauptvorteile von Node.js ist sein ereignisgesteuertes, nicht blockierendes I/O-Modell, das es ihm erm\u00f6glicht, effizient viele gleichzeitige Verbindungen zu verarbeiten, was es zu einer guten Wahl f\u00fcr Echtzeitanwendungen macht.</p> <p>Node.js bietet auch ein umfangreiches Paket-\u00d6kosystem namens npm (node package manager), das es Entwicklern erleichtert, Code zu teilen und wiederverwendbare Module zu verwenden. Es ist in vielen Bereichen eingesetzt, von Web- und API-Entwicklung bis hin zu Tooling und sogar Desktop-Anwendungsentwicklung.</p>"},{"location":"Sprachen/Skriptsprachen/","title":"Skriptsprachen","text":""},{"location":"Sprachen/Skriptsprachen/#was_sind_skriptsprachen","title":"Was Sind Skriptsprachen?","text":"<p>Skriptsprachen sind Programmiersprachen, die entwickelt wurden, um die Automatisierung von Aufgaben zu erleichtern. Im Gegensatz zu kompilierten Sprachen, die den Code vor der Ausf\u00fchrung in Maschinenanweisungen \u00fcbersetzen, werden Skriptsprachen zur Laufzeit von einem Interpreter ausgef\u00fchrt. Dies bedeutet, dass der Code Zeile f\u00fcr Zeile interpretiert und ausgef\u00fchrt wird, ohne dass ein separater Kompilierungsschritt erforderlich ist.</p> <p>Skriptsprachen zeichnen sich oft durch eine einfachere und lesbarere Syntax aus, die es Entwicklern erm\u00f6glicht, schnell und effizient zu programmieren. Sie bieten oft eingebaute Funktionen und Bibliotheken, die h\u00e4ufig ben\u00f6tigte Aufgaben abdecken, wie z.B. das Arbeiten mit Dateien, das Manipulieren von Datenstrukturen oder das Ausf\u00fchren von Systemoperationen. Skriptsprachen werden oft f\u00fcr automatisierte Aufgaben, Skripting, Prototyping, Webentwicklung, Datenverarbeitung und Systemadministration verwendet.</p> <p>Ein weiteres Merkmal von Skriptsprachen ist ihre Plattformunabh\u00e4ngigkeit. Da sie in der Regel von Interpretern ausgef\u00fchrt werden, k\u00f6nnen Skripte auf verschiedenen Betriebssystemen und Plattformen laufen, solange der entsprechende Interpreter verf\u00fcgbar ist.</p> <p>Skriptsprachen bieten oft eine schnelle Entwicklungsumgebung, da \u00c4nderungen im Code sofort getestet und implementiert werden k\u00f6nnen, ohne dass eine Kompilierung erforderlich ist. Dies erm\u00f6glicht eine iterative und flexible Entwicklung, insbesondere f\u00fcr kleinere Aufgaben oder Prototyping.</p> <p>Beispiele f\u00fcr Skriptsprachen sind Python, Ruby, Perl, JavaScript und Bash. Diese Sprachen werden oft f\u00fcr Skripting-Aufgaben, Webentwicklung, Automatisierung und Prototyping verwendet, da sie eine schnelle Entwicklung erm\u00f6glichen und eine breite Palette von Anwendungsbereichen abdecken k\u00f6nnen.</p> <p>Insgesamt bieten Skriptsprachen eine einfache und effiziente M\u00f6glichkeit, wiederholte oder automatisierte Aufgaben zu erledigen und erm\u00f6glichen eine schnelle Entwicklung von Prototypen oder kleineren Projekten. Sie eignen sich gut f\u00fcr Situationen, in denen Flexibilit\u00e4t, schnelle Iteration und Automatisierung gefragt sind.</p>"},{"location":"Sprachen/Skriptsprachen/#python","title":"Python","text":"<p>Python ist eine beliebte, vielseitige und benutzerfreundliche Programmiersprache. Mit ihrer einfachen Syntax und ihrer F\u00e4higkeit, schnell von einem Interpreter ausgef\u00fchrt zu werden, ist Python sowohl f\u00fcr Anf\u00e4nger als auch f\u00fcr erfahrene Entwickler geeignet. Python bietet eine gro\u00dfe Auswahl an Bibliotheken und Frameworks, die die Funktionalit\u00e4t erweitern und in verschiedenen Anwendungsbereichen wie Webentwicklung, Datenanalyse, maschinelles Lernen und Automatisierung eingesetzt werden k\u00f6nnen. Dank seiner plattform\u00fcbergreifenden Natur und einer aktiven Entwickler-Community ist Python eine beliebte Wahl f\u00fcr die Softwareentwicklung.</p>"},{"location":"Sprachen/Skriptsprachen/#beispiel","title":"Beispiel","text":"<pre><code># Definition einer Funktion, die die Quadratzahl einer Zahl berechnet\ndef quadrat(x):\nreturn x * x\n# Eine Variable mit einem Zahlenwert initialisieren\nzahl = 5\n# Aufruf der quadrat() Funktion mit der Variable zahl als Argument\nergebnis = quadrat(zahl)\n# Ausgabe des Ergebnisses\nprint(\"Die Quadratzahl von\", zahl, \"ist\", ergebnis)\n</code></pre> <p>In diesem Beispiel wird zuerst eine Funktion <code>quadrat()</code> definiert, die die Quadratzahl einer \u00fcbergebenen Zahl berechnet. Dann wird eine Variable <code>zahl</code> mit dem Wert 5 initialisiert. Die Funktion <code>quadrat()</code> wird aufgerufen, indem die Variable <code>zahl</code> als Argument \u00fcbergeben wird, und das Ergebnis wird in der Variablen <code>ergebnis</code> gespeichert. Schlie\u00dflich wird das Ergebnis mit einer Ausgabeanweisung auf der Konsole ausgegeben.</p> <p>Wenn du diesen Code ausf\u00fchrst, wird die Ausgabe folgenderma\u00dfen aussehen:</p> <pre><code>Die Quadratzahl von 5 ist 25\n</code></pre> <p>Dieses Beispiel zeigt, wie Funktionen in Python definiert und aufgerufen werden k\u00f6nnen, wie Variablen verwendet werden und wie Ausgaben auf der Konsole ausgegeben werden. Es ist nur ein kleiner Einblick in die M\u00f6glichkeiten von Python, aber es veranschaulicht die grundlegenden Konzepte, die in der Sprache verwendet werden.</p>"},{"location":"Sprachen/Skriptsprachen/#bash","title":"Bash","text":"<p>Bash (Bourne Again Shell) ist eine Skriptsprache und eine Unix-Shell. Es ist eine der h\u00e4ufigsten verwendetetn Skriptsprachen in der Linuxund Unix-Welt. Bash-Skripte werden verwendet, um Aufgaben in der Befehlszeile oder in Skriptdateien zu automatisieren und wiederholbare Prozesse auszuf\u00fchren.</p> <p>Bash-Skripte sind textbasiert und verwenden eine Kombination aus Shell-Befehlen, Variablenzuweisungen, Kontrollstrukturen und Funktionen. Bash-Skripte k\u00f6nnen Aufgaben wie das Ausf\u00fchren von Befehlen, die Verarbeitung von Dateien, das Abrufen von Eingaben vom Benutzer, die Verwaltung von Prozessen und die Automatisierung von Systemaufgaben umfassen.</p> <p>Die Bash-Skriptsprache bietet eine Reihe von Funktionen und Features, darunter bedingte Anweisungen (if-else), Schleifen (for, while), Funktionen, Variablen und Umgebungsvariablen, Dateiverarbeitung, Pipes und Redirections, sowie die M\u00f6glichkeit, externe Befehle und Programme aufzurufen.</p> <p>Bash-Skripte sind plattformunabh\u00e4ngig und k\u00f6nnen auf verschiedenen Unixund Linux-Distributionen sowie auf macOS verwendet werden. Sie sind besonders n\u00fctzlich f\u00fcr die Automatisierung von Systemverwaltungsaufgaben, das Schreiben von Skripten zur Bereitstellung von Software und das Erstellen von benutzerdefinierten Skripten f\u00fcr spezifische Zwecke.</p> <p>Insgesamt ist Bash eine m\u00e4chtige und weit verbreitete Skriptsprache, die in der Unixund Linux-Welt h\u00e4ufig verwendet wird, um Prozesse zu automatisieren und Skripte zur Systemverwaltung zu erstellen.</p>"},{"location":"Sprachen/Skriptsprachen/#beispiel_1","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr ein Bash-Skript, das eine Datei erstellt und einen Text darin speichert:</p> <pre><code>#!/bin/bash\n# Variable mit dem Dateinamen\ndatei=\"beispiel.txt\"\n# Text, der in die Datei geschrieben wird\ntext=\"Das ist ein Beispieltext.\"\n# Erstellen und Beschreiben der Datei\necho $text &gt; $datei\n# Ausgabe einer Best\u00e4tigung\necho \"Die Datei wurde erstellt und der Text wurde geschrieben.\"\n</code></pre> <p>In diesem Beispiel wird ein Bash-Skript erstellt, um eine Datei mit dem Namen \"beispiel.txt\" zu erstellen und einen Text (\"Das ist ein Beispieltext.\") in diese Datei zu schreiben. Das Skript verwendet die Befehle <code>echo</code> und die Verwendung von Variablen, um den gew\u00fcnschten Text in die Datei zu schreiben.</p> <p>Um das Skript auszuf\u00fchren, speichere es in einer Datei (z. B. <code>beispiel.sh</code>) und f\u00fchre es mit dem Befehl <code>bash beispiel.sh</code> aus. Das Skript erstellt die Datei \"beispiel.txt\" im selben Verzeichnis, in dem sich das Skript befindet, und schreibt den Text in die Datei. Die Ausgabe des Skripts best\u00e4tigt, dass die Datei erstellt wurde und der Text erfolgreich geschrieben wurde.</p> <p>Dies ist nur ein einfaches Beispiel, das die grundlegende Funktionalit\u00e4t eines Bash-Skripts veranschaulicht. Bash-Skripte k\u00f6nnen jedoch weitaus komplexere Aufgaben durchf\u00fchren, einschlie\u00dflich Bedingungen, Schleifen, Aufrufe von anderen Programmen und vielem mehr.</p>"},{"location":"Sprachen/Vergleiche/","title":"Vergleiche","text":"<p>Manchmal braucht man einfach eine kleine Gegen\u00fcberstellung</p>"},{"location":"Sprachen/Vergleiche/#skriptsprache_vs_deklarative_konfigurationssprache","title":"Skriptsprache vs. Deklarative Konfigurationssprache","text":"<p>Eine Skriptsprache ist eine Programmiersprache, die entwickelt wurde, um die Automatisierung von Aufgaben zu erleichtern. Skriptsprachen werden oft f\u00fcr Aufgaben verwendet, bei denen wiederholte oder allt\u00e4gliche Abl\u00e4ufe automatisiert werden sollen. Skriptsprachen erm\u00f6glichen es Entwicklern, Anweisungen schrittweise auszuf\u00fchren und logische Operationen durchzuf\u00fchren.</p> <p>Im Gegensatz dazu ist eine deklarative Konfigurationssprache darauf ausgerichtet, die gew\u00fcnschten Zust\u00e4nde oder Konfigurationen zu beschreiben, ohne explizit die Schritte zur Erreichung dieser Zust\u00e4nde anzugeben. Mit einer deklarativen Konfigurationssprache beschreibst du das gew\u00fcnschte Ergebnis oder die gew\u00fcnschten Eigenschaften, und das System oder der Interpreter k\u00fcmmert sich um die Umsetzung.</p> <p>Eine Skriptsprache wie Python oder JavaScript kann verwendet werden, um Aktionen Schritt f\u00fcr Schritt auszuf\u00fchren, komplexe Berechnungen durchzuf\u00fchren oder auf Ereignisse zu reagieren. Sie bieten Flexibilit\u00e4t und Kontrolle \u00fcber den Ablauf des Programms.</p> <p>Eine deklarative Konfigurationssprache wie YAML oder JSON wird hingegen verwendet, um den gew\u00fcnschten Zustand oder die gew\u00fcnschte Konfiguration von Systemen, Infrastruktur oder Anwendungen zu beschreiben. Anstatt den Ablauf zu steuern, konzentrierst du dich darauf, die gew\u00fcnschten Eigenschaften oder Konfigurationselemente anzugeben. Das System interpretiert dann die deklarativen Anweisungen und passt den Zustand entsprechend an.</p> <p>Der Unterschied zwischen den beiden liegt in der Herangehensweise an die Probleml\u00f6sung. In einer Skriptsprache schreibst du den Code, um den gew\u00fcnschten Ablauf zu steuern, w\u00e4hrend du in einer deklarativen Konfigurationssprache den gew\u00fcnschten Zustand beschreibst und das System die n\u00f6tigen Schritte unternimmt, um diesen Zustand zu erreichen.</p> <p>Beide Ans\u00e4tze haben ihre Vorund Nachteile und werden in verschiedenen Kontexten eingesetzt. Skriptsprachen bieten Flexibilit\u00e4t und Kontrolle, w\u00e4hrend deklarative Konfigurationssprachen die Abstraktion von Details und die Wiederholbarkeit f\u00f6rdern. Die Wahl zwischen den beiden h\u00e4ngt von den Anforderungen des jeweiligen Szenarios ab.</p>"},{"location":"Sprachen/Vergleiche/#assembly_vs_hohere_programmiersprachen","title":"Assembly vs. H\u00f6here Programmiersprachen","text":"<p>\u2139 Info: Hatten wir nicht angesprochen aber ich erinnerte mich an den Vergleich und wollte ihn abspeichern</p> <p>Stell dir vor, du m\u00f6chtest ein Haus bauen. Wenn du mit Assembly arbeitest, ist es so, als ob du ein erfahrener Bauunternehmer bist, der jede einzelne Komponente des Hauses genau kennt. Du wei\u00dft, wie jedes Rohr verlegt, jede Wand aufgebaut und jede elektrische Leitung verlegt werden muss. Du hast eine sehr detaillierte Anleitung, um das Haus von Grund auf zu bauen. Aber um diese Anleitung zu verstehen und zu befolgen, musst du ein Experte sein und alles im Detail verstehen.</p> <p>Auf der anderen Seite, wenn du mit einer h\u00f6heren Programmiersprache wie Java arbeitest, ist es so, als ob du ein Architekt bist, der das Haus entwirft. Du musst nicht jedes einzelne Detail kennen oder wissen, wie genau es implementiert wird. Stattdessen erstellst du einen Plan (Code), der die Anforderungen und Spezifikationen des Hauses beschreibt. Du verwendest eine abstraktere Sprache, um das Design zu kommunizieren, \u00e4hnlich wie wenn du Spanisch sprichst, um jemandem zu erkl\u00e4ren, wie das Haus am Ende aussehen soll.</p> <p>Der Unterschied liegt darin, dass Assembly sehr niedrig auf der Ebene der Hardware arbeitet und direkten Zugriff auf die spezifischen Maschinenbefehle hat. Es erfordert ein detailliertes Verst\u00e4ndnis der Hardware-Architektur und ist sehr genau und effizient. Es erm\u00f6glicht volle Kontrolle, aber es ist auch komplexer und erfordert mehr Aufwand, um effektiv damit zu arbeiten.</p> <p>H\u00f6here Programmiersprachen abstrahieren diese Details und bieten eine einfachere und benutzerfreundlichere Syntax. Sie erm\u00f6glichen es den Entwicklern, auf einem h\u00f6heren Level zu arbeiten, sich auf die L\u00f6sung von Problemen und die Entwicklung von Algorithmen zu konzentrieren, ohne sich um die Details der Hardware k\u00fcmmern zu m\u00fcssen. Dies macht die Entwicklung schneller, flexibler und leichter zug\u00e4nglich f\u00fcr Entwickler, die m\u00f6glicherweise nicht \u00fcber spezifische Hardwarekenntnisse verf\u00fcgen.</p> <p>Die Analogie verdeutlicht also, dass Assembly aufgrund seiner geringen Ebene der Hardwarekenntnisse und der direkten Kontrolle \u00fcber die Hardware sehr pr\u00e4zise und leistungsf\u00e4hig ist, w\u00e4hrend h\u00f6here Programmiersprachen eine h\u00f6here Abstraktionsebene bieten, die es den Entwicklern erm\u00f6glicht, effizienter und schneller zu arbeiten, ohne sich um die Details der Hardware k\u00fcmmern zu m\u00fcssen.</p>"}]}